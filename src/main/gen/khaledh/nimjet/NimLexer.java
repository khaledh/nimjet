// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Nim.flex

package khaledh.nimjet;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import khaledh.nimjet.psi.NimTypes;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TRIPLEQUOTE = 2;
  public static final int RAWSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\11\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\30\1\32\1\33"+
    "\1\34\1\35\1\5\1\36\1\37\2\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\47\1\50\10\47\1\51"+
    "\2\47\1\52\2\47\1\53\2\47\1\54\1\55\1\56"+
    "\1\10\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\47\1\112\1\113\1\114"+
    "\1\115\1\0\5\47\1\116\32\47\1\117\137\47\u0180\0"+
    "\1\120\177\0\13\120\35\0\2\3\5\0\1\120\57\0"+
    "\1\120\240\0\1\120\377\0\u0100\121";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\6\1\12\1\13\1\12"+
    "\1\14\2\15\1\16\1\17\1\3\1\16\3\20\1\21"+
    "\1\22\1\20\1\23\24\20\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\3\1\0\1\34\1\35"+
    "\2\0\1\5\1\6\1\7\2\0\1\36\1\12\1\37"+
    "\1\40\3\14\1\41\3\0\1\42\6\0\1\43\1\16"+
    "\1\44\1\45\1\0\1\46\1\20\1\47\3\20\1\50"+
    "\12\20\1\51\12\20\1\52\1\20\1\53\1\54\12\20"+
    "\1\55\1\20\1\56\23\20\1\0\1\26\1\45\1\35"+
    "\1\57\3\45\2\60\2\0\1\61\2\45\1\62\1\63"+
    "\1\42\2\63\1\42\1\15\2\0\1\42\5\0\3\15"+
    "\1\45\2\20\1\64\1\20\1\65\13\20\1\66\3\20"+
    "\1\67\6\20\1\70\4\20\1\71\2\20\1\72\3\20"+
    "\1\73\1\74\1\75\1\76\2\20\1\77\1\20\1\100"+
    "\1\20\1\101\1\20\1\102\1\103\1\104\1\105\4\20"+
    "\1\106\4\20\1\107\3\20\1\110\1\20\1\111\2\0"+
    "\5\63\1\15\1\0\1\20\1\112\2\20\1\113\1\114"+
    "\2\20\1\115\1\116\1\117\10\20\1\120\1\121\1\122"+
    "\1\123\5\20\1\124\1\125\5\20\1\126\11\20\1\127"+
    "\5\20\1\130\1\20\1\131\1\132\2\20\1\133\1\134"+
    "\3\20\1\135\1\20\1\136\1\137\1\20\1\140\3\20"+
    "\1\141\4\20\1\142\1\20\1\143\2\20\1\144\1\145"+
    "\1\146\1\20\1\147\1\20\1\150\1\20\1\151\1\152"+
    "\2\20\1\153\4\20\1\154\3\20\1\155\1\156\1\20"+
    "\1\157\1\160\1\20\1\161\6\20\1\162\1\163\3\20"+
    "\1\164\3\20\1\165\1\166\1\20\1\167\1\170\1\171"+
    "\1\20\1\172\1\173\1\174\2\20\1\175\2\20\1\176"+
    "\1\177\1\20\1\200\1\201\1\202\1\203\4\20\1\204"+
    "\1\20\1\205\1\20\1\206\1\20\1\207\1\20\1\210"+
    "\1\20\1\211\1\212\1\213\4\20\1\214";

  private static int [] zzUnpackAction() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\366\0\366\0\u03d8\0\u042a"+
    "\0\366\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4\0\366\0\u0616"+
    "\0\u0668\0\u06ba\0\u070c\0\u075e\0\366\0\366\0\u07b0\0\366"+
    "\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee\0\u0a40"+
    "\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0"+
    "\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\366\0\u0ebc\0\366"+
    "\0\366\0\366\0\366\0\366\0\u0f0e\0\u0f60\0\366\0\u0fb2"+
    "\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242"+
    "\0\u1294\0\u042a\0\366\0\u12e6\0\u1338\0\u138a\0\366\0\u13dc"+
    "\0\u142e\0\u1480\0\u14d2\0\u1524\0\u1576\0\u15c8\0\u161a\0\u166c"+
    "\0\u16be\0\366\0\u1710\0\366\0\u019a\0\u1762\0\366\0\u17b4"+
    "\0\u07b0\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2"+
    "\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u06ba"+
    "\0\u1c82\0\u1cd4\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0"+
    "\0\u1f12\0\u1f64\0\u06ba\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe"+
    "\0\u2150\0\u21a2\0\u21f4\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e"+
    "\0\u06ba\0\u23e0\0\u06ba\0\u2432\0\u2484\0\u24d6\0\u2528\0\u257a"+
    "\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714\0\u2766\0\u27b8\0\u280a"+
    "\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u2a48\0\u2a9a"+
    "\0\u2a9a\0\366\0\366\0\u0290\0\u02e2\0\u0334\0\366\0\u119e"+
    "\0\u2aec\0\u2b3e\0\u1242\0\u042a\0\u12e6\0\366\0\u2b90\0\u2be2"+
    "\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72"+
    "\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u14d2\0\u300c\0\u305e\0\u0668"+
    "\0\u30b0\0\u3102\0\u06ba\0\u3154\0\u06ba\0\u31a6\0\u31f8\0\u324a"+
    "\0\u329c\0\u32ee\0\u3340\0\u3392\0\u33e4\0\u3436\0\u3488\0\u34da"+
    "\0\u06ba\0\u352c\0\u357e\0\u35d0\0\u06ba\0\u3622\0\u3674\0\u36c6"+
    "\0\u3718\0\u376a\0\u37bc\0\u06ba\0\u380e\0\u3860\0\u38b2\0\u3904"+
    "\0\u3956\0\u39a8\0\u39fa\0\u06ba\0\u3a4c\0\u3a9e\0\u3af0\0\u06ba"+
    "\0\u06ba\0\u06ba\0\u3b42\0\u3b94\0\u3be6\0\u06ba\0\u3c38\0\u06ba"+
    "\0\u3c8a\0\u06ba\0\u3cdc\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\u3d2e"+
    "\0\u3d80\0\u3dd2\0\u3e24\0\u06ba\0\u3e76\0\u3ec8\0\u3f1a\0\u3f6c"+
    "\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\u06ba\0\u4106\0\366\0\u4158"+
    "\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u42f2\0\u4344\0\u2be2\0\u4396"+
    "\0\u43e8\0\u06ba\0\u443a\0\u448c\0\u06ba\0\u06ba\0\u44de\0\u4530"+
    "\0\u06ba\0\u06ba\0\u06ba\0\u4582\0\u45d4\0\u4626\0\u4678\0\u46ca"+
    "\0\u471c\0\u476e\0\u47c0\0\u06ba\0\u06ba\0\u06ba\0\u06ba\0\u4812"+
    "\0\u4864\0\u48b6\0\u4908\0\u495a\0\u06ba\0\u06ba\0\u49ac\0\u49fe"+
    "\0\u4a50\0\u4aa2\0\u4af4\0\u06ba\0\u4b46\0\u4b98\0\u4bea\0\u4c3c"+
    "\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6\0\u06ba\0\u4e28\0\u4e7a"+
    "\0\u4ecc\0\u4f1e\0\u4f70\0\u06ba\0\u4fc2\0\u06ba\0\u5014\0\u5066"+
    "\0\u50b8\0\u06ba\0\u06ba\0\u510a\0\u515c\0\u51ae\0\u06ba\0\u5200"+
    "\0\u06ba\0\u06ba\0\u5252\0\u06ba\0\u52a4\0\u52f6\0\u5348\0\u06ba"+
    "\0\u539a\0\u53ec\0\u543e\0\u5490\0\u06ba\0\u54e2\0\u5534\0\u5586"+
    "\0\u55d8\0\u06ba\0\u06ba\0\u06ba\0\u562a\0\u06ba\0\u567c\0\u06ba"+
    "\0\u56ce\0\u06ba\0\u06ba\0\u5720\0\u5772\0\u06ba\0\u57c4\0\u5816"+
    "\0\u5868\0\u58ba\0\u06ba\0\u590c\0\u595e\0\u59b0\0\u06ba\0\u06ba"+
    "\0\u5a02\0\u06ba\0\u06ba\0\u5a54\0\u06ba\0\u5aa6\0\u5af8\0\u5b4a"+
    "\0\u5b9c\0\u5bee\0\u5c40\0\u06ba\0\u06ba\0\u5c92\0\u5ce4\0\u5d36"+
    "\0\u06ba\0\u5d88\0\u5dda\0\u5e2c\0\u06ba\0\u06ba\0\u5e7e\0\u06ba"+
    "\0\u06ba\0\u06ba\0\u5ed0\0\u06ba\0\u06ba\0\u06ba\0\u5f22\0\u5f74"+
    "\0\u06ba\0\u5fc6\0\u6018\0\u06ba\0\u06ba\0\u606a\0\u06ba\0\u06ba"+
    "\0\u06ba\0\u06ba\0\u60bc\0\u610e\0\u6160\0\u61b2\0\u06ba\0\u6204"+
    "\0\u06ba\0\u6256\0\u06ba\0\u62a8\0\u06ba\0\u62fa\0\u06ba\0\u634c"+
    "\0\u06ba\0\u06ba\0\u06ba\0\u639e\0\u63f0\0\u6442\0\u6494\0\u06ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\10\25\1\26\1\27\1\30\1\6"+
    "\1\31\10\32\1\33\1\34\1\32\1\35\1\12\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\32\1\47\2\32\1\50\1\51\1\52\1\53\1\54"+
    "\1\32\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\20\1\66\1\67\2\32\1\4\1\0"+
    "\6\70\1\71\113\70\2\72\1\73\3\72\1\74\113\72"+
    "\123\0\2\5\1\0\1\5\122\0\1\6\2\0\3\6"+
    "\3\0\2\6\1\0\1\75\1\6\11\0\1\6\1\0"+
    "\1\75\2\6\14\0\1\6\35\0\1\6\1\0\1\75"+
    "\4\0\2\76\1\77\3\76\1\100\46\76\1\101\44\76"+
    "\2\10\1\102\117\10\5\0\1\11\2\0\3\11\3\0"+
    "\2\11\1\0\1\103\1\11\11\0\1\11\1\0\1\103"+
    "\2\11\14\0\1\11\35\0\1\11\1\0\1\103\11\0"+
    "\1\12\2\0\3\12\3\0\2\12\1\0\1\104\1\12"+
    "\11\0\1\12\1\0\1\104\2\12\14\0\1\12\35\0"+
    "\1\12\1\0\1\104\11\0\1\13\2\0\3\13\3\0"+
    "\2\13\1\0\1\105\1\13\11\0\1\13\1\0\1\105"+
    "\2\13\14\0\1\13\35\0\1\13\1\0\1\105\4\0"+
    "\2\106\1\0\1\106\1\0\6\106\1\0\41\106\1\107"+
    "\44\106\5\0\1\12\2\0\3\12\3\0\2\12\1\0"+
    "\1\104\1\12\11\0\1\110\1\0\1\104\2\12\14\0"+
    "\1\12\35\0\1\12\1\0\1\104\11\0\1\20\2\0"+
    "\3\20\3\0\2\20\1\0\1\111\1\20\11\0\1\20"+
    "\1\0\1\111\2\20\14\0\1\20\35\0\1\20\1\0"+
    "\1\111\11\0\1\20\2\0\3\20\3\0\2\20\1\0"+
    "\1\111\1\20\1\24\10\25\1\20\1\0\1\111\1\112"+
    "\1\20\14\0\1\20\35\0\1\20\1\0\1\111\4\0"+
    "\5\113\1\114\2\113\3\114\3\113\2\114\1\113\1\115"+
    "\1\116\11\113\1\114\1\113\1\115\2\114\14\113\1\114"+
    "\35\113\1\114\1\117\1\115\4\113\13\0\1\120\6\0"+
    "\1\121\11\25\6\0\1\122\1\0\1\123\1\124\1\125"+
    "\1\0\1\126\1\0\1\126\1\127\3\0\1\130\2\0"+
    "\1\122\1\0\1\123\1\124\1\125\2\0\1\126\5\0"+
    "\1\131\5\0\1\126\2\0\1\127\24\0\1\120\6\0"+
    "\1\121\11\25\10\0\1\123\1\124\1\125\1\0\1\126"+
    "\1\0\1\126\4\0\1\130\4\0\1\123\1\124\1\125"+
    "\2\0\1\126\13\0\1\126\14\0\5\132\1\31\2\132"+
    "\3\31\3\132\2\31\1\132\1\133\1\31\11\132\1\31"+
    "\1\132\1\133\2\31\14\132\1\31\35\132\1\31\1\132"+
    "\1\133\4\132\5\134\1\6\2\134\3\6\3\134\2\6"+
    "\1\134\1\75\1\6\11\134\1\6\1\134\1\75\1\135"+
    "\1\6\14\134\1\6\35\134\1\6\1\134\1\75\4\134"+
    "\5\0\1\31\2\0\3\31\3\0\2\31\1\0\1\133"+
    "\1\31\11\0\1\31\1\0\1\133\2\31\14\0\1\31"+
    "\35\0\1\31\1\0\1\133\27\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\31\32\4\0\2\32\10\0\1\137"+
    "\14\0\11\32\5\0\13\32\3\0\1\136\1\0\31\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\15\32\1\140\13\32\4\0\2\32\25\0\11\141"+
    "\5\0\13\141\3\0\1\141\1\0\31\141\4\0\2\141"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\3\32"+
    "\1\142\11\32\1\143\3\32\1\144\1\145\1\32\1\146"+
    "\4\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\10\32\1\147\2\32\1\150\5\32\1\151"+
    "\7\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\1\152\6\32\1\153\6\32\1\154\3\32"+
    "\1\155\6\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\4\32\1\156\3\32\1\157\5\32"+
    "\1\160\12\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\2\32\1\161\10\32\1\162\1\32"+
    "\1\163\11\32\1\164\1\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\1\165\7\32\1\166"+
    "\2\32\1\167\2\32\1\170\2\32\1\171\2\32\1\172"+
    "\4\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\5\32\1\173\6\32\1\174\1\175\4\32"+
    "\1\176\1\177\5\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\4\32\1\200\24\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\1\201\3\32\1\202\3\32\1\203\5\32\1\204\12\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\4\32\1\205\3\32\1\206\5\32\1\207\12\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\1\32\1\210\3\32\1\211\11\32\1\212\1\32"+
    "\1\213\2\32\1\214\4\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\21\32\1\215\1\32"+
    "\1\216\5\32\4\0\2\32\10\0\1\137\14\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\1\217\3\32\1\220"+
    "\24\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\221\2\32\1\222\13\32\1\223"+
    "\5\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\224\14\32\1\225\2\32\1\226"+
    "\3\32\1\227\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\10\32\1\230\11\32\1\231\6\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\1\232\15\32\1\233\12\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\7\32\1\234"+
    "\21\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\16\32\1\235\12\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\10\32\1\236"+
    "\20\32\4\0\2\32\24\0\1\237\104\0\1\240\2\0"+
    "\3\240\3\0\2\240\1\0\1\67\1\240\11\0\1\240"+
    "\1\0\1\67\1\241\1\240\14\0\1\240\35\0\1\240"+
    "\1\0\1\67\11\0\1\6\2\0\3\6\3\0\2\6"+
    "\1\0\1\75\1\6\11\0\1\6\1\0\1\75\1\135"+
    "\1\6\14\0\1\6\35\0\1\6\1\0\1\75\4\0"+
    "\2\76\1\77\3\76\1\242\46\76\1\101\44\76\6\0"+
    "\1\243\113\0\2\76\3\0\111\76\1\0\2\76\2\0"+
    "\4\102\2\0\1\10\106\0\3\102\6\0\1\11\2\0"+
    "\3\11\3\0\2\11\1\0\1\103\1\11\11\0\1\11"+
    "\1\0\1\103\1\244\1\11\14\0\1\11\35\0\1\11"+
    "\1\0\1\103\11\0\1\12\2\0\3\12\3\0\2\12"+
    "\1\0\1\104\1\12\11\0\1\12\1\0\1\104\1\245"+
    "\1\12\14\0\1\12\35\0\1\12\1\0\1\104\11\0"+
    "\1\13\2\0\3\13\3\0\2\13\1\0\1\105\1\13"+
    "\11\0\1\13\1\0\1\105\1\246\1\13\14\0\1\13"+
    "\35\0\1\13\1\0\1\105\17\0\1\247\114\0\1\106"+
    "\4\0\1\250\7\0\11\251\21\0\1\106\3\0\3\106"+
    "\1\0\2\106\5\0\1\106\1\0\1\106\3\0\1\106"+
    "\1\0\1\106\1\0\1\106\1\0\1\252\16\0\1\253"+
    "\2\0\3\253\3\0\2\253\1\0\2\253\11\0\1\253"+
    "\1\0\3\253\14\0\1\253\35\0\1\253\1\0\1\253"+
    "\11\0\1\20\2\0\3\20\3\0\2\20\1\0\1\111"+
    "\1\20\11\0\1\20\1\0\1\111\1\254\1\20\14\0"+
    "\1\20\35\0\1\20\1\0\1\111\11\0\1\114\2\0"+
    "\3\114\3\0\2\114\1\0\1\115\1\114\11\0\1\114"+
    "\1\0\1\115\2\114\14\0\1\114\35\0\1\114\1\0"+
    "\1\115\11\0\1\114\2\0\3\114\3\0\2\114\1\0"+
    "\1\115\1\114\11\0\1\114\1\0\1\115\1\255\1\114"+
    "\14\0\1\114\35\0\1\114\1\0\1\115\4\0\5\256"+
    "\1\114\2\256\3\114\3\256\2\114\1\256\1\115\1\114"+
    "\11\256\1\114\1\256\1\115\2\114\14\256\1\114\35\256"+
    "\1\114\1\256\1\115\4\256\41\0\3\257\1\260\1\257"+
    "\1\261\1\257\1\262\1\257\1\262\1\257\5\0\3\257"+
    "\1\260\1\257\1\261\2\257\1\262\13\257\1\262\4\257"+
    "\4\0\2\257\25\0\11\263\111\0\2\264\110\0\1\265"+
    "\125\0\1\266\1\0\1\266\1\0\11\267\114\0\1\270"+
    "\2\0\1\271\114\0\1\272\1\0\1\273\2\0\1\274"+
    "\1\275\112\0\11\276\5\0\6\276\12\0\6\276\56\0"+
    "\11\25\111\0\7\277\75\0\1\31\2\0\3\31\3\0"+
    "\2\31\1\0\1\133\1\31\11\0\1\31\1\0\1\133"+
    "\1\300\1\31\14\0\1\31\35\0\1\31\1\0\1\133"+
    "\27\0\11\32\5\0\13\32\5\0\31\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\2\32"+
    "\1\301\26\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\3\32\1\302\25\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\3\32"+
    "\1\303\25\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\21\32\1\304\7\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\14\32"+
    "\1\305\5\32\1\306\6\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\23\32\1\307\5\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\15\32\1\310\13\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\16\32\1\311\12\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\4\32\1\312\24\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\22\32\1\313\6\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\1\314\30\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\15\32\1\315\13\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\23\32\1\316\5\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\5\32\1\317\23\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\22\32\1\320\2\32\1\321\3\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\7\32\1\322"+
    "\21\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\10\32\1\323\11\32\1\324\6\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\3\32\1\325\20\32\1\326\4\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\2\32\1\327"+
    "\14\32\1\330\11\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\13\32\1\331\15\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\15\32\1\332\13\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\16\32\1\333\12\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\21\32\1\334\7\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\16\32\1\335\12\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\15\32\1\336\13\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\17\32\1\337\11\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\2\32\1\340\20\32\1\341\5\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\15\32\1\342"+
    "\13\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\343\24\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\23\32\1\344"+
    "\5\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\2\32\1\345\26\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\23\32\1\346"+
    "\5\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\27\32\1\347\1\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\3\32\1\350"+
    "\25\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\26\32\1\351\2\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\13\32\1\352"+
    "\15\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\23\32\1\353\5\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\11\32\1\354"+
    "\17\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\355\24\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\23\32\1\356"+
    "\5\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\16\32\1\357\12\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\21\32\1\360"+
    "\7\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\10\32\1\361\20\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\5\32\1\362"+
    "\15\32\1\363\5\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\20\32\1\364\2\32\1\365"+
    "\5\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\13\32\1\366\5\32\1\367\7\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\1\370\20\32\1\371\7\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\14\32\1\372\14\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\24\32\1\373\3\32\1\374\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\17\32\1\375"+
    "\11\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\17\32\1\376\11\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\15\32\1\377"+
    "\13\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\10\32\1\u0100\20\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\21\32\1\u0101"+
    "\7\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\10\32\1\u0102\20\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\4\32\1\u0103"+
    "\3\32\1\u0104\20\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\21\32\1\u0105\7\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\4\32\1\u0106\24\32\4\0\2\32\2\0\22\u0107\1\0"+
    "\77\u0107\5\0\1\240\2\0\3\240\3\0\2\240\1\0"+
    "\1\67\1\240\11\0\1\240\1\0\1\67\2\240\14\0"+
    "\1\240\35\0\1\240\1\0\1\67\17\0\1\247\7\0"+
    "\11\251\111\0\11\u0108\5\0\6\u0108\12\0\6\u0108\56\0"+
    "\11\257\5\0\13\257\3\0\1\u0109\1\0\31\257\4\0"+
    "\2\257\15\0\1\265\7\0\11\257\5\0\13\257\3\0"+
    "\1\u0109\1\0\31\257\4\0\2\257\25\0\3\257\1\u010a"+
    "\2\257\1\u010b\2\257\5\0\13\257\3\0\1\u0109\1\0"+
    "\31\257\4\0\2\257\25\0\1\257\1\u010c\1\257\1\u010d"+
    "\2\257\1\u010e\1\u010f\1\257\5\0\13\257\3\0\1\u0109"+
    "\1\0\31\257\4\0\2\257\15\0\1\u0110\7\0\11\263"+
    "\10\0\1\123\1\124\1\125\10\0\1\121\4\0\1\123"+
    "\1\124\1\125\46\0\1\120\7\0\2\264\17\0\1\123"+
    "\1\0\1\125\1\0\1\126\1\0\1\126\4\0\1\122"+
    "\4\0\1\123\1\0\1\125\2\0\1\126\13\0\1\126"+
    "\55\0\13\257\5\0\31\257\4\0\2\257\25\0\11\267"+
    "\101\0\1\u0110\7\0\11\267\10\0\1\123\1\0\1\125"+
    "\10\0\1\266\4\0\1\123\1\0\1\125\60\0\1\123"+
    "\123\0\1\123\123\0\1\275\115\0\1\275\123\0\1\275"+
    "\105\0\1\120\7\0\11\276\5\0\6\276\1\0\1\126"+
    "\1\0\1\126\4\0\1\127\1\0\6\276\2\0\1\126"+
    "\13\0\1\126\27\0\1\120\7\0\7\277\12\0\1\123"+
    "\1\0\1\125\1\0\1\126\1\0\1\126\4\0\1\131"+
    "\4\0\1\123\1\0\1\125\2\0\1\126\13\0\1\126"+
    "\37\0\11\32\5\0\13\32\3\0\1\136\1\0\7\32"+
    "\1\u0111\21\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\21\32\1\u0112\7\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\1\u0113"+
    "\30\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\u0114\24\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\16\32\1\u0115"+
    "\12\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\3\32\1\u0116\25\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\2\32\1\u0117"+
    "\26\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\1\u0118\30\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\4\32\1\u0119\16\32"+
    "\1\u011a\5\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\21\32\1\u011b\7\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\2\32"+
    "\1\u011c\17\32\1\u011d\1\u011e\1\32\1\u011f\3\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\21\32\1\u0120\7\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\4\32\1\u0121\24\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\2\32\1\u0122\20\32\1\u0123\5\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\16\32\1\u0124"+
    "\12\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\5\32\1\u0125\23\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\4\32\1\u0126"+
    "\24\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\14\32\1\u0127\14\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\4\32\1\u0128"+
    "\24\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\16\32\1\u0129\12\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\22\32\1\u012a"+
    "\6\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\1\u012b\30\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\1\u012c\30\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\14\32\1\u012d\14\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\2\32\1\u012e\26\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\16\32\1\u012f\12\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\13\32\1\u0130\15\32\4\0"+
    "\2\32\25\0\1\32\1\u0131\1\32\1\u0132\2\32\1\u0133"+
    "\1\u0134\1\32\5\0\13\32\3\0\1\136\1\0\4\32"+
    "\1\u0135\24\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\16\32\1\u0136\12\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\21\32"+
    "\1\u0137\7\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\21\32\1\u0138\7\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\7\32"+
    "\1\u0139\21\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\10\32\1\u013a\20\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\10\32"+
    "\1\u013b\20\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\4\32\1\u013c\24\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\15\32"+
    "\1\u013d\13\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\2\32\1\u013e\26\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\22\32"+
    "\1\u013f\6\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\24\32\1\u0140\4\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\23\32"+
    "\1\u0141\5\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\10\32\1\u0142\20\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\17\32"+
    "\1\u0143\11\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\4\32\1\u0144\24\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\13\32"+
    "\1\u0145\15\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\4\32\1\u0146\24\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\23\32"+
    "\1\u0147\5\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\15\32\1\u0148\13\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\1\u0149"+
    "\30\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\3\32\1\u014a\25\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\15\32\1\u014b"+
    "\13\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\13\32\1\u014c\15\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\13\32\1\u014d"+
    "\15\32\4\0\2\32\25\0\11\106\5\0\6\106\12\0"+
    "\6\106\56\0\11\257\5\0\13\257\5\0\31\257\4\0"+
    "\2\257\25\0\2\257\1\260\6\257\5\0\13\257\3\0"+
    "\1\u0109\1\0\31\257\4\0\2\257\25\0\4\257\1\260"+
    "\4\257\5\0\13\257\3\0\1\u0109\1\0\31\257\4\0"+
    "\2\257\25\0\6\257\1\u010f\2\257\5\0\13\257\3\0"+
    "\1\u0109\1\0\31\257\4\0\2\257\25\0\2\257\1\u010f"+
    "\6\257\5\0\13\257\3\0\1\u0109\1\0\31\257\4\0"+
    "\2\257\25\0\4\257\1\u010f\4\257\5\0\13\257\3\0"+
    "\1\u0109\1\0\31\257\4\0\2\257\43\0\3\257\1\260"+
    "\1\257\1\261\5\257\5\0\3\257\1\260\1\257\1\261"+
    "\23\257\4\0\2\257\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\u014e\24\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\30\32\1\u014f"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\21\32\1\u0150\7\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\12\32\1\u0151\16\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\12\32\1\u0152\16\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\4\32\1\u0153\24\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\23\32\1\u0154\5\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\10\32\1\u0155\20\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\4\32\1\u0156\24\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\10\32\1\u0157\20\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\21\32\1\u0158\7\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\1\u0159\30\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\10\32\1\u015a\20\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\17\32\1\u015b\11\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\21\32\1\u015c\7\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\4\32\1\u015d\24\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\13\32\1\u015e\15\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\23\32\1\u015f\5\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\21\32\1\u0160\7\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\24\32\1\u0161\4\32\4\0"+
    "\2\32\25\0\6\32\1\u0162\2\32\5\0\13\32\3\0"+
    "\1\136\1\0\31\32\4\0\2\32\25\0\2\32\1\u0163"+
    "\6\32\5\0\13\32\3\0\1\136\1\0\31\32\4\0"+
    "\2\32\25\0\4\32\1\u0164\4\32\5\0\13\32\3\0"+
    "\1\136\1\0\31\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\21\32\1\u0165\7\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\23\32\1\u0166\5\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\1\u0167\30\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\16\32"+
    "\1\u0168\12\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\16\32\1\u0169\12\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\15\32"+
    "\1\u016a\13\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\15\32\1\u016b\13\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\2\32"+
    "\1\u016c\26\32\4\0\2\32\25\0\11\32\5\0\1\u016d"+
    "\12\32\3\0\1\136\1\0\31\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\4\32\1\u016e"+
    "\24\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\21\32\1\u016f\7\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\10\32\1\u0170"+
    "\20\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\15\32\1\u0171\13\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\13\32\1\u0172"+
    "\15\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\u0173\24\32\4\0\2\32\25\0"+
    "\1\32\1\u0174\1\32\1\u0175\2\32\1\u0176\1\u0177\1\32"+
    "\5\0\13\32\3\0\1\136\1\0\31\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\6\32"+
    "\1\u0178\22\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\21\32\1\u0179\7\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\4\32"+
    "\1\u017a\24\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\3\32\1\u017b\25\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\2\32"+
    "\1\u017c\26\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\23\32\1\u017d\5\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\17\32"+
    "\1\u017e\11\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\15\32\1\u017f\13\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\21\32"+
    "\1\u0180\7\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\15\32\1\u0181\13\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\21\32"+
    "\1\u0182\7\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\15\32\1\u0183\13\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\23\32"+
    "\1\u0184\5\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\23\32\1\u0185\5\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\13\32"+
    "\1\u0186\15\32\4\0\2\32\25\0\3\32\1\u0187\2\32"+
    "\1\u0188\2\32\5\0\13\32\3\0\1\136\1\0\31\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\23\32\1\u0189\5\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\3\32\1\u018a\25\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\5\32\1\u018b\23\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\23\32\1\u018c\5\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\3\32\1\u018d\25\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\23\32\1\u018e\5\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\21\32\1\u018f\7\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\15\32\1\u0190\13\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\2\32\1\u0191\26\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\6\32\1\u0192\22\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\1\u0193\30\32\4\0\2\32\25\0\6\32\1\u0194"+
    "\2\32\5\0\13\32\3\0\1\136\1\0\31\32\4\0"+
    "\2\32\25\0\2\32\1\u0195\6\32\5\0\13\32\3\0"+
    "\1\136\1\0\31\32\4\0\2\32\25\0\4\32\1\u0196"+
    "\4\32\5\0\13\32\3\0\1\136\1\0\31\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\6\32\1\u0197\22\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\12\32\1\u0198\16\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\23\32\1\u0199\5\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\24\32\1\u019a\4\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\23\32\1\u019b\5\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\6\32\1\u019c\22\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\3\32\1\u019d\25\32\4\0\2\32\25\0\11\32\5\0"+
    "\13\32\3\0\1\136\1\0\2\32\1\u019e\26\32\4\0"+
    "\2\32\25\0\11\32\5\0\13\32\3\0\1\136\1\0"+
    "\30\32\1\u019f\4\0\2\32\25\0\2\32\1\u01a0\6\32"+
    "\5\0\13\32\3\0\1\136\1\0\31\32\4\0\2\32"+
    "\25\0\4\32\1\u01a1\4\32\5\0\13\32\3\0\1\136"+
    "\1\0\31\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\4\32\1\u01a2\24\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\1\u01a3"+
    "\30\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\16\32\1\u01a4\12\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\21\32\1\u01a5"+
    "\7\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\23\32\1\u01a6\5\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\22\32\1\u01a7"+
    "\6\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\u01a8\24\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\4\32\1\u01a9"+
    "\24\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\4\32\1\u01aa\24\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\23\32\1\u01ab"+
    "\5\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\2\32\1\u01ac\26\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\21\32\1\u01ad"+
    "\7\32\4\0\2\32\25\0\11\32\5\0\13\32\3\0"+
    "\1\136\1\0\1\u01ae\30\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\4\32\1\u01af\24\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\3\32\1\u01b0\25\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\21\32\1\u01b1\7\32"+
    "\4\0\2\32\25\0\11\32\5\0\13\32\3\0\1\136"+
    "\1\0\4\32\1\u01b2\24\32\4\0\2\32\25\0\11\32"+
    "\5\0\13\32\3\0\1\136\1\0\30\32\1\u01b3\4\0"+
    "\2\32\25\0\11\32\5\0\1\u01b4\12\32\3\0\1\136"+
    "\1\0\31\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\21\32\1\u01b5\7\32\4\0\2\32"+
    "\25\0\11\32\5\0\13\32\3\0\1\136\1\0\21\32"+
    "\1\u01b6\7\32\4\0\2\32\25\0\11\32\5\0\13\32"+
    "\3\0\1\136\1\0\1\u01b7\30\32\4\0\2\32\25\0"+
    "\11\32\5\0\13\32\3\0\1\136\1\0\30\32\1\u01b8"+
    "\4\0\2\32\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25830];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\2\11\2\1\1\11\5\1\1\11"+
    "\5\1\2\11\1\1\1\11\25\1\1\11\1\1\5\11"+
    "\1\1\1\0\1\11\1\1\2\0\3\1\2\0\3\1"+
    "\1\11\3\1\1\11\3\0\1\1\6\0\1\11\1\1"+
    "\1\11\1\1\1\0\1\11\77\1\1\0\2\1\2\11"+
    "\3\1\1\11\1\1\2\0\3\1\1\11\6\1\2\0"+
    "\1\1\5\0\112\1\1\11\2\0\6\1\1\0\250\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
private int tripleQuoteCount = 0;
private int rawQuoteCount = 0;

private final Set<Character> UNARY_MINUS_PRED =
    new HashSet<Character>(Arrays.asList(' ', '\t', '\n', '\r', ',', ';', '(', '[', '{'));

private IElementType handleUnaryMinus(IElementType type) {
    if (yycharat(0) != '-') {
        return type;
    }
    if (yychar > 0 && UNARY_MINUS_PRED.contains(yycharat(-1))) {
        return type;
    }
    yypushback(yylength() - 1);
    yybegin(YYINITIAL);
    return NimTypes.OP8;
}

private IElementType considerAssign(IElementType type) {
    return yycharat(yylength() - 1) == '=' ? NimTypes.OP1 : type;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case TRIPLEQUOTE: {
              yybegin(YYINITIAL);
                           return NimTypes.TRIPLESTR_ERROR;
            }  // fall though
            case 441: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 141: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 142: break;
          case 3:
            { return NimTypes.OP5;
            }
          // fall through
          case 143: break;
          case 4:
            { return NimTypes.COMMENT;
            }
          // fall through
          case 144: break;
          case 5:
            { return considerAssign(NimTypes.OP10);
            }
          // fall through
          case 145: break;
          case 6:
            { return considerAssign(NimTypes.OP9);
            }
          // fall through
          case 146: break;
          case 7:
            { return considerAssign(NimTypes.OP7);
            }
          // fall through
          case 147: break;
          case 8:
            { return NimTypes.LPAREN;
            }
          // fall through
          case 148: break;
          case 9:
            { return NimTypes.RPAREN;
            }
          // fall through
          case 149: break;
          case 10:
            { return considerAssign(NimTypes.OP8);
            }
          // fall through
          case 150: break;
          case 11:
            { return NimTypes.COMMA;
            }
          // fall through
          case 151: break;
          case 12:
            { return considerAssign(NimTypes.OP_DOTLIKE);
            }
          // fall through
          case 152: break;
          case 13:
            { return handleUnaryMinus(NimTypes.INT_LIT);
            }
          // fall through
          case 153: break;
          case 14:
            { return NimTypes.OP2;
            }
          // fall through
          case 154: break;
          case 15:
            { return NimTypes.SEMICOLON;
            }
          // fall through
          case 155: break;
          case 16:
            { return NimTypes.ID;
            }
          // fall through
          case 156: break;
          case 17:
            { return NimTypes.LBRACKET;
            }
          // fall through
          case 157: break;
          case 18:
            { return NimTypes.RBRACKET;
            }
          // fall through
          case 158: break;
          case 19:
            { return NimTypes.ACCENT;
            }
          // fall through
          case 159: break;
          case 20:
            { return NimTypes.LBRACE;
            }
          // fall through
          case 160: break;
          case 21:
            { return NimTypes.RBRACE;
            }
          // fall through
          case 161: break;
          case 22:
            { return NimTypes.OP8;
            }
          // fall through
          case 162: break;
          case 23:
            { tripleQuoteCount = 0;
            }
          // fall through
          case 163: break;
          case 24:
            { tripleQuoteCount++;
                           if (tripleQuoteCount >= 3) {
                             if (yycharat(yylength()) != '\"') {
                               yybegin(YYINITIAL);
                               return NimTypes.TRIPLESTR_LIT;
                             }
                           }
            }
          // fall through
          case 164: break;
          case 25:
            { rawQuoteCount = 0;
            }
          // fall through
          case 165: break;
          case 26:
            { yypushback(1);
                           yybegin(YYINITIAL);
                           return NimTypes.STR_ERROR;
            }
          // fall through
          case 166: break;
          case 27:
            { rawQuoteCount++;
                           if (rawQuoteCount == 1 && yycharat(yylength()) != '\"') {
                             yybegin(YYINITIAL);
                             return NimTypes.RSTR_LIT;
                           } else if (rawQuoteCount == 2) {
                              rawQuoteCount = 0;
                           }
            }
          // fall through
          case 167: break;
          case 28:
            { return NimTypes.STR_ERROR;
            }
          // fall through
          case 168: break;
          case 29:
            { return NimTypes.STR_LIT;
            }
          // fall through
          case 169: break;
          case 30:
            { yypushback(1); return NimTypes.OP9;
            }
          // fall through
          case 170: break;
          case 31:
            { return NimTypes.OP_ARROW;
            }
          // fall through
          case 171: break;
          case 32:
            { yypushback(1); return NimTypes.DOT;
            }
          // fall through
          case 172: break;
          case 33:
            { return NimTypes.DOT_RBRACE;
            }
          // fall through
          case 173: break;
          case 34:
            { return handleUnaryMinus(NimTypes.FLOAT_LIT);
            }
          // fall through
          case 174: break;
          case 35:
            { yypushback(1); return NimTypes.COLON;
            }
          // fall through
          case 175: break;
          case 36:
            { yypushback(1); return NimTypes.EQUALS;
            }
          // fall through
          case 176: break;
          case 37:
            { return NimTypes.OP_ARROW_LIKE;
            }
          // fall through
          case 177: break;
          case 38:
            { yybegin(RAWSTRING); rawQuoteCount = 0;
            }
          // fall through
          case 178: break;
          case 39:
            { return NimTypes.INVALID_IDENT;
            }
          // fall through
          case 179: break;
          case 40:
            { return NimTypes.AS;
            }
          // fall through
          case 180: break;
          case 41:
            { return NimTypes.DO;
            }
          // fall through
          case 181: break;
          case 42:
            { return NimTypes.IF;
            }
          // fall through
          case 182: break;
          case 43:
            { return NimTypes.IN;
            }
          // fall through
          case 183: break;
          case 44:
            { return NimTypes.IS;
            }
          // fall through
          case 184: break;
          case 45:
            { return NimTypes.OF;
            }
          // fall through
          case 185: break;
          case 46:
            { return NimTypes.OR;
            }
          // fall through
          case 186: break;
          case 47:
            { yybegin(TRIPLEQUOTE); tripleQuoteCount = 0;
            }
          // fall through
          case 187: break;
          case 48:
            { return NimTypes.CHAR_LIT;
            }
          // fall through
          case 188: break;
          case 49:
            { return NimTypes.OP9;
            }
          // fall through
          case 189: break;
          case 50:
            { yypushback(1); return NimTypes.DOTDOT;
            }
          // fall through
          case 190: break;
          case 51:
            { return handleUnaryMinus(NimTypes.CUSTOM_NUMERIC_LIT);
            }
          // fall through
          case 191: break;
          case 52:
            { return NimTypes.AND;
            }
          // fall through
          case 192: break;
          case 53:
            { return NimTypes.ASM;
            }
          // fall through
          case 193: break;
          case 54:
            { return NimTypes.DIV;
            }
          // fall through
          case 194: break;
          case 55:
            { return NimTypes.END;
            }
          // fall through
          case 195: break;
          case 56:
            { return NimTypes.FOR;
            }
          // fall through
          case 196: break;
          case 57:
            { return NimTypes.INT;
            }
          // fall through
          case 197: break;
          case 58:
            { return NimTypes.LET;
            }
          // fall through
          case 198: break;
          case 59:
            { return NimTypes.MOD;
            }
          // fall through
          case 199: break;
          case 60:
            { return NimTypes.NEW;
            }
          // fall through
          case 200: break;
          case 61:
            { return NimTypes.NIL;
            }
          // fall through
          case 201: break;
          case 62:
            { return NimTypes.NOT;
            }
          // fall through
          case 202: break;
          case 63:
            { return NimTypes.OUT;
            }
          // fall through
          case 203: break;
          case 64:
            { return NimTypes.PTR;
            }
          // fall through
          case 204: break;
          case 65:
            { return NimTypes.REF;
            }
          // fall through
          case 205: break;
          case 66:
            { return NimTypes.SEQ;
            }
          // fall through
          case 206: break;
          case 67:
            { return NimTypes.SET;
            }
          // fall through
          case 207: break;
          case 68:
            { return NimTypes.SHL;
            }
          // fall through
          case 208: break;
          case 69:
            { return NimTypes.SHR;
            }
          // fall through
          case 209: break;
          case 70:
            { return NimTypes.TRY;
            }
          // fall through
          case 210: break;
          case 71:
            { return NimTypes.VAR;
            }
          // fall through
          case 211: break;
          case 72:
            { return NimTypes.XOR;
            }
          // fall through
          case 212: break;
          case 73:
            { yypushback(1); return NimTypes.LBRACE_DOT;
            }
          // fall through
          case 213: break;
          case 74:
            { return NimTypes.ADDR;
            }
          // fall through
          case 214: break;
          case 75:
            { return NimTypes.AUTO;
            }
          // fall through
          case 215: break;
          case 76:
            { return NimTypes.BIND;
            }
          // fall through
          case 216: break;
          case 77:
            { return NimTypes.CASE;
            }
          // fall through
          case 217: break;
          case 78:
            { return NimTypes.CAST;
            }
          // fall through
          case 218: break;
          case 79:
            { return NimTypes.CHAR;
            }
          // fall through
          case 219: break;
          case 80:
            { return NimTypes.ECHO;
            }
          // fall through
          case 220: break;
          case 81:
            { return NimTypes.ELIF;
            }
          // fall through
          case 221: break;
          case 82:
            { return NimTypes.ELSE;
            }
          // fall through
          case 222: break;
          case 83:
            { return NimTypes.ENUM;
            }
          // fall through
          case 223: break;
          case 84:
            { return NimTypes.FROM;
            }
          // fall through
          case 224: break;
          case 85:
            { return NimTypes.FUNC;
            }
          // fall through
          case 225: break;
          case 86:
            { return NimTypes.INT8;
            }
          // fall through
          case 226: break;
          case 87:
            { return NimTypes.PROC;
            }
          // fall through
          case 227: break;
          case 88:
            { return NimTypes.TRUE;
            }
          // fall through
          case 228: break;
          case 89:
            { return NimTypes.TYPE;
            }
          // fall through
          case 229: break;
          case 90:
            { return NimTypes.UINT;
            }
          // fall through
          case 230: break;
          case 91:
            { return NimTypes.VOID;
            }
          // fall through
          case 231: break;
          case 92:
            { return NimTypes.WHEN;
            }
          // fall through
          case 232: break;
          case 93:
            { return NimTypes.ARRAY;
            }
          // fall through
          case 233: break;
          case 94:
            { return NimTypes.BLOCK;
            }
          // fall through
          case 234: break;
          case 95:
            { return NimTypes.BREAK;
            }
          // fall through
          case 235: break;
          case 96:
            { return NimTypes.CONST;
            }
          // fall through
          case 236: break;
          case 97:
            { return NimTypes.DEFER;
            }
          // fall through
          case 237: break;
          case 98:
            { return NimTypes.FALSE;
            }
          // fall through
          case 238: break;
          case 99:
            { return NimTypes.FLOAT;
            }
          // fall through
          case 239: break;
          case 100:
            { return NimTypes.INT16;
            }
          // fall through
          case 240: break;
          case 101:
            { return NimTypes.INT32;
            }
          // fall through
          case 241: break;
          case 102:
            { return NimTypes.INT64;
            }
          // fall through
          case 242: break;
          case 103:
            { return NimTypes.ISNOT;
            }
          // fall through
          case 243: break;
          case 104:
            { return NimTypes.MACRO;
            }
          // fall through
          case 244: break;
          case 105:
            { return NimTypes.MIXIN;
            }
          // fall through
          case 245: break;
          case 106:
            { return NimTypes.NOTIN;
            }
          // fall through
          case 246: break;
          case 107:
            { return NimTypes.RAISE;
            }
          // fall through
          case 247: break;
          case 108:
            { return NimTypes.TUPLE;
            }
          // fall through
          case 248: break;
          case 109:
            { return NimTypes.UINT8;
            }
          // fall through
          case 249: break;
          case 110:
            { return NimTypes.USING;
            }
          // fall through
          case 250: break;
          case 111:
            { return NimTypes.WHILE;
            }
          // fall through
          case 251: break;
          case 112:
            { return NimTypes.YIELD;
            }
          // fall through
          case 252: break;
          case 113:
            { return NimTypes.ASSERT;
            }
          // fall through
          case 253: break;
          case 114:
            { return NimTypes.EXCEPT;
            }
          // fall through
          case 254: break;
          case 115:
            { return NimTypes.EXPORT;
            }
          // fall through
          case 255: break;
          case 116:
            { return NimTypes.IMPORT;
            }
          // fall through
          case 256: break;
          case 117:
            { return NimTypes.METHOD;
            }
          // fall through
          case 257: break;
          case 118:
            { return NimTypes.OBJECT;
            }
          // fall through
          case 258: break;
          case 119:
            { return NimTypes.RETURN;
            }
          // fall through
          case 259: break;
          case 120:
            { return NimTypes.STATIC;
            }
          // fall through
          case 260: break;
          case 121:
            { return NimTypes.STRING;
            }
          // fall through
          case 261: break;
          case 122:
            { return NimTypes.UINT16;
            }
          // fall through
          case 262: break;
          case 123:
            { return NimTypes.UINT32;
            }
          // fall through
          case 263: break;
          case 124:
            { return NimTypes.UINT64;
            }
          // fall through
          case 264: break;
          case 125:
            { return NimTypes.CONCEPT;
            }
          // fall through
          case 265: break;
          case 126:
            { return NimTypes.CSTRING;
            }
          // fall through
          case 266: break;
          case 127:
            { return NimTypes.DISCARD;
            }
          // fall through
          case 267: break;
          case 128:
            { return NimTypes.FINALLY;
            }
          // fall through
          case 268: break;
          case 129:
            { return NimTypes.FLOAT32;
            }
          // fall through
          case 269: break;
          case 130:
            { return NimTypes.FLOAT64;
            }
          // fall through
          case 270: break;
          case 131:
            { return NimTypes.INCLUDE;
            }
          // fall through
          case 271: break;
          case 132:
            { return NimTypes.VARARGS;
            }
          // fall through
          case 272: break;
          case 133:
            { return NimTypes.CONTINUE;
            }
          // fall through
          case 273: break;
          case 134:
            { return NimTypes.DISTINCT;
            }
          // fall through
          case 274: break;
          case 135:
            { return NimTypes.ITERATOR;
            }
          // fall through
          case 275: break;
          case 136:
            { return NimTypes.TEMPLATE;
            }
          // fall through
          case 276: break;
          case 137:
            { return NimTypes.CONVERTER;
            }
          // fall through
          case 277: break;
          case 138:
            { return NimTypes.INTERFACE;
            }
          // fall through
          case 278: break;
          case 139:
            { return NimTypes.OPENARRAY;
            }
          // fall through
          case 279: break;
          case 140:
            { return NimTypes.UNCHECKEDARRAY;
            }
          // fall through
          case 280: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
