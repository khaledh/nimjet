// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Nim.flex

package khaledh.nimjet;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import khaledh.nimjet.psi.NimTypes;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TRIPLEQUOTE = 2;
  public static final int RAWSTRING = 4;
  public static final int MULTILINE_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\11\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\30\1\32\1\33"+
    "\1\34\1\35\1\5\1\36\1\37\2\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\47\1\50\10\47\1\51"+
    "\2\47\1\52\2\47\1\53\2\47\1\54\1\55\1\56"+
    "\1\10\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\0\5\47\1\117\32\47\1\120\137\47\u0180\0"+
    "\1\121\177\0\13\121\35\0\2\3\5\0\1\121\57\0"+
    "\1\121\240\0\1\121\377\0\u0100\122";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\6\1\12\1\13\1\12"+
    "\1\14\2\15\1\16\1\17\1\3\1\16\4\20\1\21"+
    "\1\22\1\20\1\23\24\20\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\3\34\1\3\1\0\1\35"+
    "\1\36\1\0\2\4\1\37\1\5\1\6\1\7\2\0"+
    "\1\40\1\12\1\41\1\42\3\14\1\43\3\0\1\44"+
    "\6\0\1\45\1\16\1\46\1\47\1\0\1\20\1\50"+
    "\1\20\1\51\3\20\1\52\21\20\1\53\11\20\1\54"+
    "\1\20\1\55\1\56\11\20\1\57\1\20\1\60\25\20"+
    "\1\0\1\26\1\47\1\0\1\61\1\62\1\36\1\63"+
    "\1\0\3\47\2\64\2\0\1\65\2\47\1\66\1\67"+
    "\1\44\2\67\1\44\1\15\2\0\1\44\5\0\3\15"+
    "\1\47\3\20\1\70\1\20\1\71\27\20\1\72\2\20"+
    "\1\73\6\20\1\74\4\20\1\75\2\20\1\76\3\20"+
    "\1\77\1\100\1\101\2\20\1\102\2\20\1\103\1\20"+
    "\1\104\1\20\1\105\1\106\1\107\1\110\4\20\1\111"+
    "\5\20\1\112\3\20\1\113\1\20\1\114\1\62\2\0"+
    "\5\67\1\15\1\0\2\20\1\115\1\20\1\116\1\117"+
    "\1\20\1\120\1\20\1\121\1\122\3\20\1\123\1\124"+
    "\20\20\1\125\1\126\1\127\5\20\1\130\1\131\5\20"+
    "\1\132\12\20\1\133\5\20\1\134\1\20\1\135\1\136"+
    "\3\20\1\137\1\140\4\20\1\141\1\142\1\143\1\144"+
    "\2\20\1\145\1\20\1\146\7\20\1\147\2\20\1\150"+
    "\4\20\1\151\1\20\1\152\2\20\1\153\1\154\1\155"+
    "\1\20\1\156\1\20\1\157\1\20\1\160\1\161\3\20"+
    "\1\162\4\20\1\163\3\20\1\164\1\20\1\165\1\20"+
    "\1\166\1\167\3\20\1\170\5\20\1\171\1\172\1\0"+
    "\1\20\1\173\1\174\3\20\1\175\1\176\3\20\1\177"+
    "\3\20\1\200\1\201\2\20\1\202\1\203\1\204\1\20"+
    "\1\205\1\206\1\207\4\20\1\210\2\20\1\211\2\20"+
    "\1\212\1\213\1\20\1\214\1\215\1\20\1\216\1\217"+
    "\1\220\1\221\3\20\1\222\1\20\1\223\1\224\6\20"+
    "\1\225\3\20\1\226\1\20\1\227\1\20\1\230\5\20"+
    "\1\231\1\232\2\20\1\233\1\234\1\20\1\235\4\20"+
    "\1\236\1\20\1\237\1\20\1\240\1\20\1\241\1\20"+
    "\1\242\1\20\1\243";

  private static int [] zzUnpackAction() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u014c\0\u014c\0\u0437"+
    "\0\u048a\0\u014c\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u014c"+
    "\0\u067c\0\u06cf\0\u0722\0\u0775\0\u07c8\0\u081b\0\u014c\0\u014c"+
    "\0\u086e\0\u014c\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d\0\u0a60"+
    "\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8"+
    "\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u014c"+
    "\0\u0f90\0\u014c\0\u014c\0\u014c\0\u014c\0\u014c\0\u014c\0\u0fe3"+
    "\0\u1036\0\u1089\0\u10dc\0\u014c\0\u112f\0\u1182\0\u11d5\0\u1228"+
    "\0\u11d5\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d"+
    "\0\u048a\0\u014c\0\u14c0\0\u1513\0\u1566\0\u014c\0\u15b9\0\u160c"+
    "\0\u165f\0\u16b2\0\u1705\0\u1758\0\u17ab\0\u17fe\0\u1851\0\u18a4"+
    "\0\u014c\0\u18f7\0\u014c\0\u01f2\0\u194a\0\u199d\0\u014c\0\u19f0"+
    "\0\u086e\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35"+
    "\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd"+
    "\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u0722\0\u2112"+
    "\0\u2165\0\u21b8\0\u220b\0\u225e\0\u22b1\0\u2304\0\u2357\0\u23aa"+
    "\0\u0722\0\u23fd\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef"+
    "\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u0722\0\u27e1\0\u0722"+
    "\0\u2834\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79"+
    "\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11"+
    "\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56\0\u2f56"+
    "\0\u2fa9\0\u014c\0\u2ffc\0\u014c\0\u014c\0\u304f\0\u02eb\0\u033e"+
    "\0\u0391\0\u014c\0\u1374\0\u30a2\0\u30f5\0\u141a\0\u048a\0\u14c0"+
    "\0\u014c\0\u3148\0\u319b\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u333a"+
    "\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f\0\u16b2"+
    "\0\u35d2\0\u3625\0\u06cf\0\u3678\0\u36cb\0\u371e\0\u0722\0\u3771"+
    "\0\u0722\0\u37c4\0\u3817\0\u386a\0\u38bd\0\u3910\0\u3963\0\u39b6"+
    "\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\u3c4e"+
    "\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded\0\u3e40\0\u3e93\0\u3ee6"+
    "\0\u0722\0\u3f39\0\u3f8c\0\u0722\0\u3fdf\0\u4032\0\u4085\0\u40d8"+
    "\0\u412b\0\u417e\0\u0722\0\u41d1\0\u4224\0\u4277\0\u42ca\0\u431d"+
    "\0\u4370\0\u43c3\0\u0722\0\u4416\0\u4469\0\u44bc\0\u0722\0\u0722"+
    "\0\u450f\0\u4562\0\u45b5\0\u0722\0\u4608\0\u465b\0\u0722\0\u46ae"+
    "\0\u0722\0\u4701\0\u0722\0\u0722\0\u0722\0\u0722\0\u4754\0\u47a7"+
    "\0\u47fa\0\u484d\0\u0722\0\u48a0\0\u48f3\0\u4946\0\u4999\0\u49ec"+
    "\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38\0\u0722\0\u4b8b\0\u014c\0\u014c"+
    "\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a\0\u4d7d\0\u4dd0\0\u319b"+
    "\0\u4e23\0\u4e76\0\u4ec9\0\u0722\0\u4f1c\0\u0722\0\u0722\0\u4f6f"+
    "\0\u0722\0\u4fc2\0\u0722\0\u0722\0\u5015\0\u5068\0\u50bb\0\u0722"+
    "\0\u0722\0\u510e\0\u5161\0\u51b4\0\u5207\0\u525a\0\u52ad\0\u5300"+
    "\0\u5353\0\u53a6\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598"+
    "\0\u55eb\0\u0722\0\u0722\0\u0722\0\u563e\0\u5691\0\u56e4\0\u5737"+
    "\0\u578a\0\u0722\0\u0722\0\u57dd\0\u5830\0\u5883\0\u58d6\0\u5929"+
    "\0\u0722\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8\0\u5b1b\0\u5b6e"+
    "\0\u5bc1\0\u5c14\0\u5c67\0\u0722\0\u5cba\0\u5d0d\0\u5d60\0\u5db3"+
    "\0\u5e06\0\u0722\0\u5e59\0\u0722\0\u5eac\0\u5eff\0\u5f52\0\u5fa5"+
    "\0\u0722\0\u0722\0\u5ff8\0\u604b\0\u609e\0\u60f1\0\u0722\0\u0722"+
    "\0\u0722\0\u0722\0\u6144\0\u6197\0\u61ea\0\u623d\0\u0722\0\u6290"+
    "\0\u62e3\0\u6336\0\u6389\0\u63dc\0\u642f\0\u6482\0\u0722\0\u64d5"+
    "\0\u6528\0\u0722\0\u657b\0\u65ce\0\u6621\0\u6674\0\u0722\0\u66c7"+
    "\0\u671a\0\u676d\0\u67c0\0\u0722\0\u0722\0\u0722\0\u6813\0\u0722"+
    "\0\u6866\0\u0722\0\u68b9\0\u0722\0\u0722\0\u690c\0\u695f\0\u69b2"+
    "\0\u0722\0\u6a05\0\u6a58\0\u6aab\0\u6afe\0\u0722\0\u6b51\0\u6ba4"+
    "\0\u6bf7\0\u0722\0\u6c4a\0\u0722\0\u6c9d\0\u0722\0\u0722\0\u6cf0"+
    "\0\u6d43\0\u6d96\0\u0722\0\u6de9\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35"+
    "\0\u0722\0\u0722\0\u6f88\0\u6fdb\0\u0722\0\u702e\0\u7081\0\u70d4"+
    "\0\u7127\0\u0722\0\u0722\0\u717a\0\u71cd\0\u7220\0\u0722\0\u7273"+
    "\0\u72c6\0\u7319\0\u0722\0\u0722\0\u736c\0\u73bf\0\u0722\0\u0722"+
    "\0\u0722\0\u7412\0\u0722\0\u0722\0\u0722\0\u7465\0\u74b8\0\u750b"+
    "\0\u755e\0\u0722\0\u75b1\0\u7604\0\u0722\0\u7657\0\u76aa\0\u0722"+
    "\0\u76fd\0\u7750\0\u0722\0\u0722\0\u77a3\0\u0722\0\u0722\0\u0722"+
    "\0\u0722\0\u77f6\0\u7849\0\u789c\0\u0722\0\u78ef\0\u0722\0\u0722"+
    "\0\u7942\0\u7995\0\u79e8\0\u7a3b\0\u7a8e\0\u7ae1\0\u0722\0\u7b34"+
    "\0\u7b87\0\u7bda\0\u0722\0\u7c2d\0\u0722\0\u7c80\0\u0722\0\u7cd3"+
    "\0\u7d26\0\u7d79\0\u7dcc\0\u7e1f\0\u0722\0\u0722\0\u7e72\0\u7ec5"+
    "\0\u0722\0\u0722\0\u7f18\0\u0722\0\u7f6b\0\u7fbe\0\u8011\0\u8064"+
    "\0\u0722\0\u80b7\0\u0722\0\u810a\0\u0722\0\u815d\0\u0722\0\u81b0"+
    "\0\u0722\0\u8203\0\u0722";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\10\26\1\27\1\30\1\31\1\7"+
    "\1\32\1\33\1\34\6\33\1\35\1\36\1\33\1\37"+
    "\1\13\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\2\33\1\51\2\33\1\52\1\53\1\54"+
    "\1\55\1\56\1\33\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\33\1\67\1\21\1\70\1\71"+
    "\2\33\1\5\1\0\6\72\1\73\114\72\2\74\1\75"+
    "\3\74\1\76\114\74\7\77\1\100\46\77\1\101\44\77"+
    "\124\0\2\6\1\0\1\6\123\0\1\7\2\0\3\7"+
    "\3\0\2\7\1\0\1\102\1\7\11\0\1\7\1\0"+
    "\1\102\2\7\14\0\1\7\36\0\1\7\1\0\1\102"+
    "\4\0\2\103\1\104\3\103\1\105\46\103\1\106\45\103"+
    "\7\107\1\110\44\107\1\111\46\107\5\0\1\12\2\0"+
    "\3\12\3\0\2\12\1\0\1\112\1\12\11\0\1\12"+
    "\1\0\1\112\2\12\14\0\1\12\36\0\1\12\1\0"+
    "\1\112\11\0\1\13\2\0\3\13\3\0\2\13\1\0"+
    "\1\113\1\13\11\0\1\13\1\0\1\113\2\13\14\0"+
    "\1\13\36\0\1\13\1\0\1\113\11\0\1\14\2\0"+
    "\3\14\3\0\2\14\1\0\1\114\1\14\11\0\1\14"+
    "\1\0\1\114\2\14\14\0\1\14\36\0\1\14\1\0"+
    "\1\114\4\0\2\115\1\0\1\115\1\0\6\115\1\0"+
    "\41\115\1\116\45\115\5\0\1\13\2\0\3\13\3\0"+
    "\2\13\1\0\1\113\1\13\11\0\1\117\1\0\1\113"+
    "\2\13\14\0\1\13\36\0\1\13\1\0\1\113\11\0"+
    "\1\21\2\0\3\21\3\0\2\21\1\0\1\120\1\21"+
    "\11\0\1\21\1\0\1\120\2\21\14\0\1\21\36\0"+
    "\1\21\1\0\1\120\11\0\1\21\2\0\3\21\3\0"+
    "\2\21\1\0\1\120\1\21\1\25\10\26\1\21\1\0"+
    "\1\120\1\121\1\21\14\0\1\21\36\0\1\21\1\0"+
    "\1\120\4\0\5\122\1\123\2\122\3\123\3\122\2\123"+
    "\1\122\1\124\1\125\11\122\1\123\1\122\1\124\2\123"+
    "\14\122\1\123\36\122\1\123\1\126\1\124\4\122\13\0"+
    "\1\127\6\0\1\130\11\26\6\0\1\131\1\0\1\132"+
    "\1\133\1\134\1\0\1\135\1\0\1\135\1\136\3\0"+
    "\1\137\2\0\1\131\1\0\1\132\1\133\1\134\2\0"+
    "\1\135\5\0\1\140\5\0\1\135\2\0\1\136\25\0"+
    "\1\127\6\0\1\130\11\26\10\0\1\132\1\133\1\134"+
    "\1\0\1\135\1\0\1\135\4\0\1\137\4\0\1\132"+
    "\1\133\1\134\2\0\1\135\13\0\1\135\15\0\5\141"+
    "\1\32\2\141\3\32\3\141\2\32\1\141\1\142\1\32"+
    "\11\141\1\32\1\141\1\142\2\32\14\141\1\32\36\141"+
    "\1\32\1\141\1\142\4\141\5\143\1\7\2\143\3\7"+
    "\3\143\2\7\1\143\1\102\1\7\11\143\1\7\1\143"+
    "\1\102\1\144\1\7\14\143\1\7\36\143\1\7\1\143"+
    "\1\102\4\143\5\0\1\32\2\0\3\32\3\0\2\32"+
    "\1\0\1\142\1\32\11\0\1\32\1\0\1\142\2\32"+
    "\14\0\1\32\36\0\1\32\1\0\1\142\27\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\32\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\10\33"+
    "\1\146\21\33\4\0\2\33\10\0\1\147\14\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\32\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\15\33"+
    "\1\150\14\33\4\0\2\33\25\0\11\151\5\0\13\151"+
    "\3\0\1\151\1\0\32\151\4\0\2\151\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\3\33\1\152\11\33"+
    "\1\153\3\33\1\154\1\155\1\33\1\156\5\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\10\33\1\157\2\33\1\160\2\33\1\161\2\33\1\162"+
    "\10\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\1\163\1\33\1\164\1\165\1\33\1\166"+
    "\1\33\1\167\1\170\2\33\1\171\2\33\1\172\3\33"+
    "\1\173\1\33\1\174\5\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\4\33\1\175\3\33"+
    "\1\176\5\33\1\177\13\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\13\33\1\200\1\33"+
    "\1\201\11\33\1\202\2\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\1\203\7\33\1\204"+
    "\2\33\1\205\2\33\1\206\2\33\1\207\2\33\1\210"+
    "\5\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\5\33\1\211\6\33\1\212\1\213\4\33"+
    "\1\214\1\215\6\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\4\33\1\216\25\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\1\217\3\33\1\220\3\33\1\221\5\33\1\222\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\10\33\1\223\5\33\1\224\13\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\1\33"+
    "\1\225\3\33\1\226\11\33\1\227\1\33\1\230\2\33"+
    "\1\231\5\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\16\33\1\232\2\33\1\233\1\33"+
    "\1\234\6\33\4\0\2\33\10\0\1\147\14\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\1\235\3\33\1\236"+
    "\25\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\4\33\1\237\2\33\1\240\13\33\1\241"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\4\33\1\242\14\33\1\243\2\33\1\244"+
    "\3\33\1\245\1\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\10\33\1\246\4\33\1\247"+
    "\4\33\1\250\7\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\1\251\15\33\1\252\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\7\33\1\253\22\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\16\33\1\254\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\10\33\1\255\21\33\4\0\2\33\24\0\1\256"+
    "\105\0\1\257\2\0\3\257\3\0\2\257\1\0\1\71"+
    "\1\257\11\0\1\257\1\0\1\71\1\260\1\257\14\0"+
    "\1\257\36\0\1\257\1\0\1\71\13\0\1\261\44\0"+
    "\1\262\55\0\1\263\120\0\1\7\2\0\3\7\3\0"+
    "\2\7\1\0\1\102\1\7\11\0\1\7\1\0\1\102"+
    "\1\144\1\7\14\0\1\7\36\0\1\7\1\0\1\102"+
    "\4\0\2\103\1\104\3\103\1\264\46\103\1\106\45\103"+
    "\6\0\1\265\114\0\2\103\3\0\112\103\1\0\2\103"+
    "\1\0\2\107\1\266\122\107\1\266\51\107\1\111\46\107"+
    "\5\0\1\12\2\0\3\12\3\0\2\12\1\0\1\112"+
    "\1\12\11\0\1\12\1\0\1\112\1\267\1\12\14\0"+
    "\1\12\36\0\1\12\1\0\1\112\11\0\1\13\2\0"+
    "\3\13\3\0\2\13\1\0\1\113\1\13\11\0\1\13"+
    "\1\0\1\113\1\270\1\13\14\0\1\13\36\0\1\13"+
    "\1\0\1\113\11\0\1\14\2\0\3\14\3\0\2\14"+
    "\1\0\1\114\1\14\11\0\1\14\1\0\1\114\1\271"+
    "\1\14\14\0\1\14\36\0\1\14\1\0\1\114\17\0"+
    "\1\272\115\0\1\115\4\0\1\273\7\0\11\274\21\0"+
    "\1\115\3\0\3\115\1\0\2\115\5\0\1\115\1\0"+
    "\1\115\3\0\1\115\1\0\1\115\1\0\1\115\1\0"+
    "\1\275\17\0\1\276\2\0\3\276\3\0\2\276\1\0"+
    "\2\276\11\0\1\276\1\0\3\276\14\0\1\276\36\0"+
    "\1\276\1\0\1\276\11\0\1\21\2\0\3\21\3\0"+
    "\2\21\1\0\1\120\1\21\11\0\1\21\1\0\1\120"+
    "\1\277\1\21\14\0\1\21\36\0\1\21\1\0\1\120"+
    "\11\0\1\123\2\0\3\123\3\0\2\123\1\0\1\124"+
    "\1\123\11\0\1\123\1\0\1\124\2\123\14\0\1\123"+
    "\36\0\1\123\1\0\1\124\11\0\1\123\2\0\3\123"+
    "\3\0\2\123\1\0\1\124\1\123\11\0\1\123\1\0"+
    "\1\124\1\300\1\123\14\0\1\123\36\0\1\123\1\0"+
    "\1\124\4\0\5\301\1\123\2\301\3\123\3\301\2\123"+
    "\1\301\1\124\1\123\11\301\1\123\1\301\1\124\2\123"+
    "\14\301\1\123\36\301\1\123\1\301\1\124\4\301\41\0"+
    "\3\302\1\303\1\302\1\304\1\302\1\305\1\302\1\305"+
    "\1\302\5\0\3\302\1\303\1\302\1\304\2\302\1\305"+
    "\13\302\1\305\5\302\4\0\2\302\25\0\11\306\112\0"+
    "\2\307\111\0\1\310\126\0\1\311\1\0\1\311\1\0"+
    "\11\312\115\0\1\313\2\0\1\314\115\0\1\315\1\0"+
    "\1\316\2\0\1\317\1\320\113\0\11\321\5\0\6\321"+
    "\12\0\6\321\57\0\11\26\112\0\7\322\76\0\1\32"+
    "\2\0\3\32\3\0\2\32\1\0\1\142\1\32\11\0"+
    "\1\32\1\0\1\142\1\323\1\32\14\0\1\32\36\0"+
    "\1\32\1\0\1\142\27\0\11\33\5\0\13\33\5\0"+
    "\32\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\6\33\1\324\23\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\2\33\1\325"+
    "\27\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\3\33\1\326\26\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\3\33\1\327"+
    "\26\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\21\33\1\330\10\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\14\33\1\331"+
    "\15\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\23\33\1\332\6\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\15\33\1\333"+
    "\14\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\16\33\1\334\13\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\16\33\1\335"+
    "\13\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\4\33\1\336\25\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\22\33\1\337"+
    "\7\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\7\33\1\340\22\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\16\33\1\341"+
    "\13\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\13\33\1\342\16\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\1\343\31\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\15\33\1\344\14\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\16\33\1\345\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\15\33\1\346\14\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\2\33\1\347\4\33"+
    "\1\350\1\351\12\33\1\352\6\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\2\33\1\353"+
    "\5\33\1\354\2\33\1\355\6\33\1\356\7\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\5\33\1\357\24\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\22\33\1\360\2\33\1\361"+
    "\4\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\10\33\1\362\11\33\1\363\7\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\3\33\1\364\20\33\1\365\5\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\2\33\1\366"+
    "\14\33\1\367\12\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\13\33\1\370\16\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\15\33\1\371\14\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\16\33\1\372\13\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\21\33\1\373\10\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\16\33\1\374\13\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\15\33\1\375\14\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\17\33\1\376\12\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\2\33\1\377\20\33\1\u0100\6\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\15\33\1\u0101"+
    "\14\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\4\33\1\u0102\25\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\23\33\1\u0103"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\2\33\1\u0104\27\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\23\33\1\u0105"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\27\33\1\u0106\2\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\3\33\1\u0107"+
    "\26\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\13\33\1\u0108\16\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\23\33\1\u0109"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\11\33\1\u010a\20\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\4\33\1\u010b"+
    "\25\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\23\33\1\u010c\6\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\10\33\1\u010d"+
    "\21\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\16\33\1\u010e\13\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\21\33\1\u010f"+
    "\10\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\10\33\1\u0110\21\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\5\33\1\u0111"+
    "\15\33\1\u0112\6\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\20\33\1\u0113\2\33\1\u0114"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\13\33\1\u0115\5\33\1\u0116\10\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\1\u0117\20\33\1\u0118\10\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\14\33\1\u0119\15\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\24\33\1\u011a\3\33\1\u011b\1\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\17\33"+
    "\1\u011c\12\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\17\33\1\u011d\12\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\15\33"+
    "\1\u011e\14\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\23\33\1\u011f\6\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\10\33"+
    "\1\u0120\21\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\21\33\1\u0121\10\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\10\33"+
    "\1\u0122\21\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\4\33\1\u0123\3\33\1\u0124\21\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\21\33\1\u0125\10\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\4\33\1\u0126\25\33"+
    "\4\0\2\33\2\0\22\u0127\1\0\100\u0127\5\0\1\257"+
    "\2\0\3\257\3\0\2\257\1\0\1\71\1\257\11\0"+
    "\1\257\1\0\1\71\2\257\14\0\1\257\36\0\1\257"+
    "\1\0\1\71\60\0\1\262\55\0\1\u0128\114\0\4\266"+
    "\2\0\1\107\107\0\3\266\14\0\1\272\7\0\11\274"+
    "\112\0\11\u0129\5\0\6\u0129\12\0\6\u0129\57\0\11\302"+
    "\5\0\13\302\3\0\1\u012a\1\0\32\302\4\0\2\302"+
    "\15\0\1\310\7\0\11\302\5\0\13\302\3\0\1\u012a"+
    "\1\0\32\302\4\0\2\302\25\0\3\302\1\u012b\2\302"+
    "\1\u012c\2\302\5\0\13\302\3\0\1\u012a\1\0\32\302"+
    "\4\0\2\302\25\0\1\302\1\u012d\1\302\1\u012e\2\302"+
    "\1\u012f\1\u0130\1\302\5\0\13\302\3\0\1\u012a\1\0"+
    "\32\302\4\0\2\302\15\0\1\u0131\7\0\11\306\10\0"+
    "\1\132\1\133\1\134\10\0\1\130\4\0\1\132\1\133"+
    "\1\134\47\0\1\127\7\0\2\307\17\0\1\132\1\0"+
    "\1\134\1\0\1\135\1\0\1\135\4\0\1\131\4\0"+
    "\1\132\1\0\1\134\2\0\1\135\13\0\1\135\56\0"+
    "\13\302\5\0\32\302\4\0\2\302\25\0\11\312\102\0"+
    "\1\u0131\7\0\11\312\10\0\1\132\1\0\1\134\10\0"+
    "\1\311\4\0\1\132\1\0\1\134\61\0\1\132\124\0"+
    "\1\132\124\0\1\320\116\0\1\320\124\0\1\320\106\0"+
    "\1\127\7\0\11\321\5\0\6\321\1\0\1\135\1\0"+
    "\1\135\4\0\1\136\1\0\6\321\2\0\1\135\13\0"+
    "\1\135\30\0\1\127\7\0\7\322\12\0\1\132\1\0"+
    "\1\134\1\0\1\135\1\0\1\135\4\0\1\140\4\0"+
    "\1\132\1\0\1\134\2\0\1\135\13\0\1\135\40\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\6\33\1\u0132"+
    "\23\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\7\33\1\u0133\22\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\21\33\1\u0134"+
    "\10\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\1\u0135\31\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\16\33\1\u0136\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\3\33\1\u0137\26\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\2\33\1\u0138\27\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\13\33\1\u0139\16\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\1\u013a\31\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\4\33\1\u013b\16\33\1\u013c\6\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\1\u013d\31\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\24\33\1\u013e\5\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\16\33\1\u013f\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\21\33\1\u0140\10\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\23\33\1\u0141\6\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\15\33\1\u0142\14\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\2\33\1\u0143\17\33"+
    "\1\u0144\1\u0145\1\33\1\u0146\4\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\7\33\1\u0147"+
    "\22\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\16\33\1\u0148\13\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\31\33\1\u0149"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\21\33\1\u014a\10\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\7\33\1\u014b\22\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\15\33\1\u014c\14\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\16\33\1\u014d\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\7\33\1\u014e\22\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\4\33\1\u014f\25\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\2\33\1\u0150\20\33\1\u0151\6\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\5\33"+
    "\1\u0152\24\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\4\33\1\u0153\25\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\14\33"+
    "\1\u0154\15\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\4\33\1\u0155\25\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\16\33"+
    "\1\u0156\13\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\22\33\1\u0157\7\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\1\u0158"+
    "\31\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\1\u0159\31\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\14\33\1\u015a\15\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\2\33\1\u015b\27\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\16\33\1\u015c\13\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\13\33\1\u015d\16\33\4\0\2\33\25\0\1\33"+
    "\1\u015e\1\33\1\u015f\2\33\1\u0160\1\u0161\1\33\5\0"+
    "\13\33\3\0\1\145\1\0\4\33\1\u0162\25\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\16\33\1\u0163\13\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\21\33\1\u0164\10\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\21\33\1\u0165\10\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\7\33\1\u0166\22\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\10\33\1\u0167\21\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\10\33\1\u0168\21\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\4\33\1\u0169\25\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\15\33\1\u016a\14\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\15\33\1\u016b\14\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\2\33\1\u016c\27\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\22\33\1\u016d\7\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\24\33\1\u016e\5\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\23\33\1\u016f\6\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\10\33\1\u0170\21\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\17\33\1\u0171\12\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\4\33\1\u0172\25\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\13\33\1\u0173\16\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\4\33\1\u0174\25\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\23\33\1\u0175\6\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\30\33\1\u0176\1\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\15\33\1\u0177\14\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\1\u0178\31\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\3\33"+
    "\1\u0179\26\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\15\33\1\u017a\14\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\13\33"+
    "\1\u017b\16\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\13\33\1\u017c\16\33\4\0\2\33"+
    "\25\0\11\115\5\0\6\115\12\0\6\115\57\0\11\302"+
    "\5\0\13\302\5\0\32\302\4\0\2\302\25\0\2\302"+
    "\1\303\6\302\5\0\13\302\3\0\1\u012a\1\0\32\302"+
    "\4\0\2\302\25\0\4\302\1\303\4\302\5\0\13\302"+
    "\3\0\1\u012a\1\0\32\302\4\0\2\302\25\0\6\302"+
    "\1\u0130\2\302\5\0\13\302\3\0\1\u012a\1\0\32\302"+
    "\4\0\2\302\25\0\2\302\1\u0130\6\302\5\0\13\302"+
    "\3\0\1\u012a\1\0\32\302\4\0\2\302\25\0\4\302"+
    "\1\u0130\4\302\5\0\13\302\3\0\1\u012a\1\0\32\302"+
    "\4\0\2\302\43\0\3\302\1\303\1\302\1\304\5\302"+
    "\5\0\3\302\1\303\1\302\1\304\24\302\4\0\2\302"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\4\33"+
    "\1\u017d\25\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\4\33\1\u017e\25\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\30\33"+
    "\1\u017f\1\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\12\33\1\u0180\17\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\12\33"+
    "\1\u0181\17\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\21\33\1\u0182\10\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\1\33"+
    "\1\u0183\30\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\1\u0184\31\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\6\33\1\u0185"+
    "\23\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\4\33\1\u0186\25\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\23\33\1\u0187"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\10\33\1\u0188\21\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\4\33\1\u0189"+
    "\25\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\1\u018a\31\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\21\33\1\u018b\10\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\4\33\1\u018c\25\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\10\33\1\u018d\21\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\1\u018e\31\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\23\33\1\u018f\6\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\15\33\1\u0190\14\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\16\33\1\u0191\13\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\21\33\1\u0192\10\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\1\u0193\31\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\10\33"+
    "\1\u0194\21\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\17\33\1\u0195\12\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\21\33"+
    "\1\u0196\10\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\4\33\1\u0197\25\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\13\33"+
    "\1\u0198\16\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\23\33\1\u0199\6\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\21\33"+
    "\1\u019a\10\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\24\33\1\u019b\5\33\4\0\2\33"+
    "\25\0\6\33\1\u019c\2\33\5\0\13\33\3\0\1\145"+
    "\1\0\32\33\4\0\2\33\25\0\2\33\1\u019d\6\33"+
    "\5\0\13\33\3\0\1\145\1\0\32\33\4\0\2\33"+
    "\25\0\4\33\1\u019e\4\33\5\0\13\33\3\0\1\145"+
    "\1\0\32\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\21\33\1\u019f\10\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\23\33"+
    "\1\u01a0\6\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\1\u01a1\31\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\16\33\1\u01a2"+
    "\13\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\16\33\1\u01a3\13\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\15\33\1\u01a4"+
    "\14\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\15\33\1\u01a5\14\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\2\33\1\u01a6"+
    "\27\33\4\0\2\33\25\0\11\33\5\0\1\u01a7\12\33"+
    "\3\0\1\145\1\0\32\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\23\33\1\u01a8\6\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\4\33\1\u01a9\25\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\21\33\1\u01aa\10\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\10\33\1\u01ab\21\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\15\33\1\u01ac\14\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\13\33\1\u01ad\16\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\4\33\1\u01ae\25\33"+
    "\4\0\2\33\25\0\1\33\1\u01af\1\33\1\u01b0\2\33"+
    "\1\u01b1\1\u01b2\1\33\5\0\13\33\3\0\1\145\1\0"+
    "\32\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\17\33\1\u01b3\12\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\6\33\1\u01b4"+
    "\23\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\21\33\1\u01b5\10\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\4\33\1\u01b6"+
    "\25\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\3\33\1\u01b7\26\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\22\33\1\u01b8"+
    "\7\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\2\33\1\u01b9\27\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\13\33\1\u01ba"+
    "\16\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\23\33\1\u01bb\6\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\3\33\1\u01bc"+
    "\7\33\1\u01bd\16\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\17\33\1\u01be\12\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\15\33\1\u01bf\14\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\21\33\1\u01c0\10\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\21\33\1\u01c1\10\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\23\33\1\u01c2\6\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\u01c3\1\0"+
    "\32\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\15\33\1\u01c4\14\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\21\33\1\u01c5"+
    "\10\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\6\33\1\u01c6\23\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\21\33\1\u01c7"+
    "\10\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\21\33\1\u01c8\10\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\15\33\1\u01c9"+
    "\14\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\23\33\1\u01ca\6\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\23\33\1\u01cb"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\13\33\1\u01cc\16\33\4\0\2\33\25\0"+
    "\3\33\1\u01cd\2\33\1\u01ce\2\33\5\0\13\33\3\0"+
    "\1\145\1\0\32\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\23\33\1\u01cf\6\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\3\33\1\u01d0\26\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\5\33\1\u01d1\24\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\23\33\1\u01d2\6\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\3\33\1\u01d3\26\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\23\33\1\u01d4\6\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\21\33\1\u01d5\10\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\4\33\1\u01d6\25\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\15\33\1\u01d7\14\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\2\33\1\u01d8\27\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\6\33\1\u01d9\23\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\1\u01da\31\33\4\0\2\33\25\0\6\33\1\u01db\2\33"+
    "\5\0\13\33\3\0\1\145\1\0\32\33\4\0\2\33"+
    "\25\0\2\33\1\u01dc\6\33\5\0\13\33\3\0\1\145"+
    "\1\0\32\33\4\0\2\33\25\0\4\33\1\u01dd\4\33"+
    "\5\0\13\33\3\0\1\145\1\0\32\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\4\33"+
    "\1\u01de\25\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\6\33\1\u01df\23\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\23\33"+
    "\1\u01e0\6\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\12\33\1\u01e1\17\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\4\33"+
    "\1\u01e2\25\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\16\33\1\u01e3\13\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\16\33"+
    "\1\u01e4\13\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\23\33\1\u01e5\6\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\24\33"+
    "\1\u01e6\5\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\23\33\1\u01e7\6\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\5\0\23\33\1\u01e8\6\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\6\33\1\u01e9\23\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\13\33\1\u01ea\16\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\23\33\1\u01eb\6\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\3\33\1\u01ec\26\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\2\33\1\u01ed\27\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\30\33\1\u01ee\1\33"+
    "\4\0\2\33\25\0\2\33\1\u01ef\6\33\5\0\13\33"+
    "\3\0\1\145\1\0\32\33\4\0\2\33\25\0\4\33"+
    "\1\u01f0\4\33\5\0\13\33\3\0\1\145\1\0\32\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\4\33\1\u01f1\25\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\1\u01f2\31\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\16\33\1\u01f3\13\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\21\33\1\u01f4\10\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\21\33\1\u01f5\10\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\23\33\1\u01f6\6\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\3\33\1\u01f7\26\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\22\33\1\u01f8\7\33\4\0"+
    "\2\33\25\0\11\33\5\0\5\33\1\u01f9\1\33\1\u01fa"+
    "\1\33\1\u01fb\1\33\3\0\1\145\1\0\32\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\4\33\1\u01fc\25\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\24\33\1\u01fd\5\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\15\33\1\u01fe\14\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\4\33\1\u01ff\25\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\4\33\1\u0200\25\33\4\0\2\33\25\0\11\33\5\0"+
    "\1\u0201\12\33\3\0\1\145\1\0\32\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\16\33"+
    "\1\u0202\13\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\23\33\1\u0203\6\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\2\33"+
    "\1\u0204\27\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\21\33\1\u0205\10\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\1\u0206"+
    "\31\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\4\33\1\u0207\25\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\13\33\1\u0208"+
    "\16\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\15\33\1\u0209\14\33\4\0\2\33\25\0"+
    "\11\33\5\0\7\33\1\u020a\3\33\3\0\1\145\1\0"+
    "\32\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\3\33\1\u020b\26\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\1\33\1\u020c"+
    "\30\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\6\33\1\u020d\23\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\21\33\1\u020e"+
    "\10\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\21\33\1\u020f\10\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\15\33\1\u0210"+
    "\14\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\4\33\1\u0211\25\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\30\33\1\u0212"+
    "\1\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\16\33\1\u0213\13\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\23\33\1\u0214"+
    "\6\33\4\0\2\33\25\0\11\33\5\0\13\33\3\0"+
    "\1\145\1\0\15\33\1\u0215\14\33\4\0\2\33\25\0"+
    "\11\33\5\0\1\u0216\12\33\3\0\1\145\1\0\32\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\13\33\1\u0217\16\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\21\33\1\u0218\10\33"+
    "\4\0\2\33\25\0\11\33\5\0\13\33\3\0\1\145"+
    "\1\0\6\33\1\u0219\23\33\4\0\2\33\25\0\11\33"+
    "\5\0\13\33\3\0\1\145\1\0\1\u021a\31\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\23\33\1\u021b\6\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\21\33\1\u021c\10\33\4\0"+
    "\2\33\25\0\11\33\5\0\13\33\3\0\1\145\1\0"+
    "\4\33\1\u021d\25\33\4\0\2\33\25\0\11\33\5\0"+
    "\13\33\3\0\1\145\1\0\1\u021e\31\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\23\33"+
    "\1\u021f\6\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\21\33\1\u0220\10\33\4\0\2\33"+
    "\25\0\11\33\5\0\13\33\3\0\1\145\1\0\30\33"+
    "\1\u0221\1\33\4\0\2\33\25\0\11\33\5\0\13\33"+
    "\3\0\1\145\1\0\1\u0222\31\33\4\0\2\33\25\0"+
    "\11\33\5\0\13\33\3\0\1\145\1\0\30\33\1\u0223"+
    "\1\33\4\0\2\33\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[33366];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\10\1\2\11\2\1\1\11\5\1\1\11"+
    "\6\1\2\11\1\1\1\11\25\1\1\11\1\1\6\11"+
    "\3\1\1\0\1\11\1\1\1\0\6\1\2\0\3\1"+
    "\1\11\3\1\1\11\3\0\1\1\6\0\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\106\1\1\0\2\1"+
    "\1\0\1\11\1\1\2\11\1\0\3\1\1\11\1\1"+
    "\2\0\3\1\1\11\6\1\2\0\1\1\5\0\127\1"+
    "\2\11\2\0\6\1\1\0\221\1\1\0\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
private int tripleQuoteCount = 0;
private int rawQuoteCount = 0;
private int multilineCommentLevel = 0;

private final Set<Character> UNARY_MINUS_PRED =
    new HashSet<Character>(Arrays.asList(' ', '\t', '\n', '\r', ',', ';', '(', '[', '{'));

private IElementType handleUnaryMinus(IElementType type) {
    if (yycharat(0) != '-') {
        return type;
    }
    if (yychar > 0 && UNARY_MINUS_PRED.contains(yycharat(-1))) {
        return type;
    }
    yypushback(yylength() - 1);
    yybegin(YYINITIAL);
    return NimTypes.OP8;
}

private IElementType considerAssign(IElementType type) {
    return yycharat(yylength() - 1) == '=' ? NimTypes.OP1 : type;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case TRIPLEQUOTE: {
              yybegin(YYINITIAL);
                           return NimTypes.TRIPLESTR_ERROR;
            }  // fall though
            case 548: break;
            case MULTILINE_COMMENT: {
              yybegin(YYINITIAL);
                           return NimTypes.MULTILINE_COMMENT_ERROR;
            }  // fall though
            case 549: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 164: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 165: break;
          case 3:
            { return NimTypes.OP5;
            }
          // fall through
          case 166: break;
          case 4:
            { return NimTypes.LINE_COMMENT;
            }
          // fall through
          case 167: break;
          case 5:
            { return considerAssign(NimTypes.OP10);
            }
          // fall through
          case 168: break;
          case 6:
            { return considerAssign(NimTypes.OP9);
            }
          // fall through
          case 169: break;
          case 7:
            { return considerAssign(NimTypes.OP7);
            }
          // fall through
          case 170: break;
          case 8:
            { return NimTypes.LPAREN;
            }
          // fall through
          case 171: break;
          case 9:
            { return NimTypes.RPAREN;
            }
          // fall through
          case 172: break;
          case 10:
            { return considerAssign(NimTypes.OP8);
            }
          // fall through
          case 173: break;
          case 11:
            { return NimTypes.COMMA;
            }
          // fall through
          case 174: break;
          case 12:
            { return considerAssign(NimTypes.OP_DOTLIKE);
            }
          // fall through
          case 175: break;
          case 13:
            { return handleUnaryMinus(NimTypes.INT_LIT);
            }
          // fall through
          case 176: break;
          case 14:
            { return NimTypes.OP2;
            }
          // fall through
          case 177: break;
          case 15:
            { return NimTypes.SEMICOLON;
            }
          // fall through
          case 178: break;
          case 16:
            { return NimTypes.ID;
            }
          // fall through
          case 179: break;
          case 17:
            { return NimTypes.LBRACKET;
            }
          // fall through
          case 180: break;
          case 18:
            { return NimTypes.RBRACKET;
            }
          // fall through
          case 181: break;
          case 19:
            { return NimTypes.ACCENT;
            }
          // fall through
          case 182: break;
          case 20:
            { return NimTypes.LBRACE;
            }
          // fall through
          case 183: break;
          case 21:
            { return NimTypes.RBRACE;
            }
          // fall through
          case 184: break;
          case 22:
            { return NimTypes.OP8;
            }
          // fall through
          case 185: break;
          case 23:
            { tripleQuoteCount = 0;
            }
          // fall through
          case 186: break;
          case 24:
            { tripleQuoteCount++;
                           if (tripleQuoteCount >= 3) {
                             if (yycharat(yylength()) != '\"') {
                               yybegin(YYINITIAL);
                               return NimTypes.TRIPLESTR_LIT;
                             }
                           }
            }
          // fall through
          case 187: break;
          case 25:
            { rawQuoteCount = 0;
            }
          // fall through
          case 188: break;
          case 26:
            { yypushback(1);
                           yybegin(YYINITIAL);
                           return NimTypes.STR_ERROR;
            }
          // fall through
          case 189: break;
          case 27:
            { rawQuoteCount++;
                           if (rawQuoteCount == 1 && yycharat(yylength()) != '\"') {
                             yybegin(YYINITIAL);
                             return NimTypes.RSTR_LIT;
                           } else if (rawQuoteCount == 2) {
                              rawQuoteCount = 0;
                           }
            }
          // fall through
          case 190: break;
          case 28:
            { 
            }
          // fall through
          case 191: break;
          case 29:
            { return NimTypes.STR_ERROR;
            }
          // fall through
          case 192: break;
          case 30:
            { return NimTypes.STR_LIT;
            }
          // fall through
          case 193: break;
          case 31:
            { yybegin(MULTILINE_COMMENT); multilineCommentLevel = 1;
            }
          // fall through
          case 194: break;
          case 32:
            { yypushback(1); return NimTypes.OP9;
            }
          // fall through
          case 195: break;
          case 33:
            { return NimTypes.OP_ARROW;
            }
          // fall through
          case 196: break;
          case 34:
            { yypushback(1); return NimTypes.DOT;
            }
          // fall through
          case 197: break;
          case 35:
            { return NimTypes.DOT_RBRACE;
            }
          // fall through
          case 198: break;
          case 36:
            { return handleUnaryMinus(NimTypes.FLOAT_LIT);
            }
          // fall through
          case 199: break;
          case 37:
            { yypushback(1); return NimTypes.COLON;
            }
          // fall through
          case 200: break;
          case 38:
            { yypushback(1); return NimTypes.EQUALS;
            }
          // fall through
          case 201: break;
          case 39:
            { return NimTypes.OP_ARROW_LIKE;
            }
          // fall through
          case 202: break;
          case 40:
            { yybegin(RAWSTRING); rawQuoteCount = 0;
            }
          // fall through
          case 203: break;
          case 41:
            { return NimTypes.INVALID_IDENT;
            }
          // fall through
          case 204: break;
          case 42:
            { return NimTypes.AS;
            }
          // fall through
          case 205: break;
          case 43:
            { return NimTypes.DO;
            }
          // fall through
          case 206: break;
          case 44:
            { return NimTypes.IF;
            }
          // fall through
          case 207: break;
          case 45:
            { return NimTypes.IN;
            }
          // fall through
          case 208: break;
          case 46:
            { return NimTypes.IS;
            }
          // fall through
          case 209: break;
          case 47:
            { return NimTypes.OF;
            }
          // fall through
          case 210: break;
          case 48:
            { return NimTypes.OR;
            }
          // fall through
          case 211: break;
          case 49:
            { multilineCommentLevel++;
            }
          // fall through
          case 212: break;
          case 50:
            { multilineCommentLevel--;
                           if (multilineCommentLevel == 0) {
                             yybegin(YYINITIAL);
                             return NimTypes.MULTILINE_COMMENT;
                           }
            }
          // fall through
          case 213: break;
          case 51:
            { yybegin(TRIPLEQUOTE); tripleQuoteCount = 0;
            }
          // fall through
          case 214: break;
          case 52:
            { return NimTypes.CHAR_LIT;
            }
          // fall through
          case 215: break;
          case 53:
            { return NimTypes.OP9;
            }
          // fall through
          case 216: break;
          case 54:
            { yypushback(1); return NimTypes.DOTDOT;
            }
          // fall through
          case 217: break;
          case 55:
            { return handleUnaryMinus(NimTypes.CUSTOM_NUMERIC_LIT);
            }
          // fall through
          case 218: break;
          case 56:
            { return NimTypes.AND;
            }
          // fall through
          case 219: break;
          case 57:
            { return NimTypes.ASM;
            }
          // fall through
          case 220: break;
          case 58:
            { return NimTypes.DIV;
            }
          // fall through
          case 221: break;
          case 59:
            { return NimTypes.END;
            }
          // fall through
          case 222: break;
          case 60:
            { return NimTypes.FOR;
            }
          // fall through
          case 223: break;
          case 61:
            { return NimTypes.INT;
            }
          // fall through
          case 224: break;
          case 62:
            { return NimTypes.LET;
            }
          // fall through
          case 225: break;
          case 63:
            { return NimTypes.MOD;
            }
          // fall through
          case 226: break;
          case 64:
            { return NimTypes.NIL;
            }
          // fall through
          case 227: break;
          case 65:
            { return NimTypes.NOT;
            }
          // fall through
          case 228: break;
          case 66:
            { return NimTypes.OUT;
            }
          // fall through
          case 229: break;
          case 67:
            { return NimTypes.PTR;
            }
          // fall through
          case 230: break;
          case 68:
            { return NimTypes.REF;
            }
          // fall through
          case 231: break;
          case 69:
            { return NimTypes.SEQ;
            }
          // fall through
          case 232: break;
          case 70:
            { return NimTypes.SET;
            }
          // fall through
          case 233: break;
          case 71:
            { return NimTypes.SHL;
            }
          // fall through
          case 234: break;
          case 72:
            { return NimTypes.SHR;
            }
          // fall through
          case 235: break;
          case 73:
            { return NimTypes.TRY;
            }
          // fall through
          case 236: break;
          case 74:
            { return NimTypes.VAR;
            }
          // fall through
          case 237: break;
          case 75:
            { return NimTypes.XOR;
            }
          // fall through
          case 238: break;
          case 76:
            { yypushback(1); return NimTypes.LBRACE_DOT;
            }
          // fall through
          case 239: break;
          case 77:
            { return NimTypes.ADDR;
            }
          // fall through
          case 240: break;
          case 78:
            { return NimTypes.AUTO;
            }
          // fall through
          case 241: break;
          case 79:
            { return NimTypes.BIND;
            }
          // fall through
          case 242: break;
          case 80:
            { return NimTypes.BOOL;
            }
          // fall through
          case 243: break;
          case 81:
            { return NimTypes.CASE;
            }
          // fall through
          case 244: break;
          case 82:
            { return NimTypes.CAST;
            }
          // fall through
          case 245: break;
          case 83:
            { return NimTypes.CHAR;
            }
          // fall through
          case 246: break;
          case 84:
            { return NimTypes.CINT;
            }
          // fall through
          case 247: break;
          case 85:
            { return NimTypes.ELIF;
            }
          // fall through
          case 248: break;
          case 86:
            { return NimTypes.ELSE;
            }
          // fall through
          case 249: break;
          case 87:
            { return NimTypes.ENUM;
            }
          // fall through
          case 250: break;
          case 88:
            { return NimTypes.FROM;
            }
          // fall through
          case 251: break;
          case 89:
            { return NimTypes.FUNC;
            }
          // fall through
          case 252: break;
          case 90:
            { return NimTypes.INT8;
            }
          // fall through
          case 253: break;
          case 91:
            { return NimTypes.PROC;
            }
          // fall through
          case 254: break;
          case 92:
            { return NimTypes.TRUE;
            }
          // fall through
          case 255: break;
          case 93:
            { return NimTypes.TYPE;
            }
          // fall through
          case 256: break;
          case 94:
            { return NimTypes.UINT;
            }
          // fall through
          case 257: break;
          case 95:
            { return NimTypes.VOID;
            }
          // fall through
          case 258: break;
          case 96:
            { return NimTypes.WHEN;
            }
          // fall through
          case 259: break;
          case 97:
            { return NimTypes.ARRAY;
            }
          // fall through
          case 260: break;
          case 98:
            { return NimTypes.BLOCK;
            }
          // fall through
          case 261: break;
          case 99:
            { return NimTypes.BREAK;
            }
          // fall through
          case 262: break;
          case 100:
            { return NimTypes.CCHAR;
            }
          // fall through
          case 263: break;
          case 101:
            { return NimTypes.CLONG;
            }
          // fall through
          case 264: break;
          case 102:
            { return NimTypes.CONST;
            }
          // fall through
          case 265: break;
          case 103:
            { return NimTypes.CUINT;
            }
          // fall through
          case 266: break;
          case 104:
            { return NimTypes.DEFER;
            }
          // fall through
          case 267: break;
          case 105:
            { return NimTypes.FALSE;
            }
          // fall through
          case 268: break;
          case 106:
            { return NimTypes.FLOAT;
            }
          // fall through
          case 269: break;
          case 107:
            { return NimTypes.INT16;
            }
          // fall through
          case 270: break;
          case 108:
            { return NimTypes.INT32;
            }
          // fall through
          case 271: break;
          case 109:
            { return NimTypes.INT64;
            }
          // fall through
          case 272: break;
          case 110:
            { return NimTypes.ISNOT;
            }
          // fall through
          case 273: break;
          case 111:
            { return NimTypes.MACRO;
            }
          // fall through
          case 274: break;
          case 112:
            { return NimTypes.MIXIN;
            }
          // fall through
          case 275: break;
          case 113:
            { return NimTypes.NOTIN;
            }
          // fall through
          case 276: break;
          case 114:
            { return NimTypes.RAISE;
            }
          // fall through
          case 277: break;
          case 115:
            { return NimTypes.TUPLE;
            }
          // fall through
          case 278: break;
          case 116:
            { return NimTypes.UINT8;
            }
          // fall through
          case 279: break;
          case 117:
            { return NimTypes.USING;
            }
          // fall through
          case 280: break;
          case 118:
            { return NimTypes.WHILE;
            }
          // fall through
          case 281: break;
          case 119:
            { return NimTypes.YIELD;
            }
          // fall through
          case 282: break;
          case 120:
            { return NimTypes.CFLOAT;
            }
          // fall through
          case 283: break;
          case 121:
            { return NimTypes.CSCHAR;
            }
          // fall through
          case 284: break;
          case 122:
            { return NimTypes.CSHORT;
            }
          // fall through
          case 285: break;
          case 123:
            { return NimTypes.CUCHAR;
            }
          // fall through
          case 286: break;
          case 124:
            { return NimTypes.CULONG;
            }
          // fall through
          case 287: break;
          case 125:
            { return NimTypes.EXCEPT;
            }
          // fall through
          case 288: break;
          case 126:
            { return NimTypes.EXPORT;
            }
          // fall through
          case 289: break;
          case 127:
            { return NimTypes.IMPORT;
            }
          // fall through
          case 290: break;
          case 128:
            { return NimTypes.METHOD;
            }
          // fall through
          case 291: break;
          case 129:
            { return NimTypes.OBJECT;
            }
          // fall through
          case 292: break;
          case 130:
            { return NimTypes.RETURN;
            }
          // fall through
          case 293: break;
          case 131:
            { return NimTypes.STATIC;
            }
          // fall through
          case 294: break;
          case 132:
            { return NimTypes.STRING;
            }
          // fall through
          case 295: break;
          case 133:
            { return NimTypes.UINT16;
            }
          // fall through
          case 296: break;
          case 134:
            { return NimTypes.UINT32;
            }
          // fall through
          case 297: break;
          case 135:
            { return NimTypes.UINT64;
            }
          // fall through
          case 298: break;
          case 136:
            { return NimTypes.CDOUBLE;
            }
          // fall through
          case 299: break;
          case 137:
            { return NimTypes.CONCEPT;
            }
          // fall through
          case 300: break;
          case 138:
            { return NimTypes.CSIZE_T;
            }
          // fall through
          case 301: break;
          case 139:
            { return NimTypes.CSTRING;
            }
          // fall through
          case 302: break;
          case 140:
            { return NimTypes.CUSHORT;
            }
          // fall through
          case 303: break;
          case 141:
            { return NimTypes.DISCARD;
            }
          // fall through
          case 304: break;
          case 142:
            { return NimTypes.FINALLY;
            }
          // fall through
          case 305: break;
          case 143:
            { return NimTypes.FLOAT32;
            }
          // fall through
          case 306: break;
          case 144:
            { return NimTypes.FLOAT64;
            }
          // fall through
          case 307: break;
          case 145:
            { return NimTypes.INCLUDE;
            }
          // fall through
          case 308: break;
          case 146:
            { return NimTypes.POINTER;
            }
          // fall through
          case 309: break;
          case 147:
            { return NimTypes.UNTYPED;
            }
          // fall through
          case 310: break;
          case 148:
            { return NimTypes.VARARGS;
            }
          // fall through
          case 311: break;
          case 149:
            { return NimTypes.CONTINUE;
            }
          // fall through
          case 312: break;
          case 150:
            { return NimTypes.DISTINCT;
            }
          // fall through
          case 313: break;
          case 151:
            { return NimTypes.ITERATOR;
            }
          // fall through
          case 314: break;
          case 152:
            { return NimTypes.TEMPLATE;
            }
          // fall through
          case 315: break;
          case 153:
            { return NimTypes.CLONG_LONG;
            }
          // fall through
          case 316: break;
          case 154:
            { return NimTypes.CONVERTER;
            }
          // fall through
          case 317: break;
          case 155:
            { return NimTypes.INTERFACE;
            }
          // fall through
          case 318: break;
          case 156:
            { return NimTypes.OPENARRAY;
            }
          // fall through
          case 319: break;
          case 157:
            { return NimTypes.BIGGEST_INT;
            }
          // fall through
          case 320: break;
          case 158:
            { return NimTypes.CULONG_LONG;
            }
          // fall through
          case 321: break;
          case 159:
            { return NimTypes.BIGGEST_UINT;
            }
          // fall through
          case 322: break;
          case 160:
            { return NimTypes.CLONG_DOUBLE;
            }
          // fall through
          case 323: break;
          case 161:
            { return NimTypes.BIGGEST_FLOAT;
            }
          // fall through
          case 324: break;
          case 162:
            { return NimTypes.CSTRING_ARRAY;
            }
          // fall through
          case 325: break;
          case 163:
            { return NimTypes.UNCHECKEDARRAY;
            }
          // fall through
          case 326: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
