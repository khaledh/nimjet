// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Nim.flex

package khaledh.nimjet;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import khaledh.nimjet.psi.NimTypes;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TRIPLEQUOTE = 2;
  public static final int RAWSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\11\1\23\1\24"+
    "\6\25\2\26\1\27\1\30\1\5\1\31\1\32\2\33"+
    "\1\34\1\35\4\34\13\36\1\37\5\36\1\40\2\36"+
    "\1\41\1\42\1\43\1\10\1\44\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\36\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\36"+
    "\1\75\1\17\1\76\1\77\1\0\5\36\1\100\32\36"+
    "\1\101\137\36\u0180\0\1\102\177\0\13\102\35\0\2\3"+
    "\5\0\1\102\57\0\1\102\240\0\1\102\377\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\5\1\11\1\12\1\11\1\13"+
    "\2\14\1\15\1\16\1\3\1\15\2\17\1\20\1\21"+
    "\25\17\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\3\1\0\1\32\1\33\2\0\1\34\1\4"+
    "\1\5\1\6\2\0\1\35\1\11\1\36\1\37\2\13"+
    "\1\40\4\0\1\41\1\15\1\42\1\36\1\0\1\43"+
    "\1\44\2\17\1\45\7\17\1\46\7\17\1\47\1\17"+
    "\1\50\1\51\11\17\1\52\1\53\20\17\1\0\1\24"+
    "\1\36\1\33\1\54\1\0\3\36\2\55\2\0\1\56"+
    "\1\36\1\57\1\60\1\61\1\36\1\17\1\62\1\63"+
    "\7\17\1\64\2\17\1\65\4\17\1\66\7\17\1\67"+
    "\3\17\1\70\1\71\1\72\1\17\1\73\1\17\1\74"+
    "\1\17\1\75\1\17\1\76\1\77\2\17\1\100\3\17"+
    "\1\101\2\17\1\102\1\17\1\103\1\0\1\104\1\105"+
    "\2\17\1\106\1\107\7\17\1\110\1\111\1\112\3\17"+
    "\1\113\1\114\12\17\1\115\5\17\1\116\1\17\1\117"+
    "\2\17\1\120\1\121\1\17\1\122\2\17\1\123\10\17"+
    "\1\124\1\17\1\125\1\17\1\126\1\127\1\17\1\130"+
    "\3\17\1\131\1\132\1\133\1\134\5\17\1\135\1\136"+
    "\1\17\1\137\3\17\1\140\1\141\1\142\1\143\1\17"+
    "\1\144\2\17\1\145\1\17\1\146\1\147\3\17\1\150"+
    "\1\17\1\151\1\17\1\152\1\153\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\314\0\314\0\u0330\0\u0374"+
    "\0\314\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\314\0\u050c"+
    "\0\u0550\0\u0594\0\u05d8\0\314\0\314\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\314\0\u0bf4\0\314\0\314\0\314"+
    "\0\314\0\314\0\u0c38\0\u0c7c\0\314\0\u0cc0\0\u0d04\0\u01dc"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0374\0\314\0\u0f68\0\u0fac\0\314\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\314\0\u1100\0\314\0\u0154\0\u1144\0\314\0\u061c"+
    "\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\u13a8\0\u13ec\0\u0594\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u0594\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u0594"+
    "\0\u0594\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4"+
    "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u1dc0\0\314\0\314\0\u0d48\0\u0220"+
    "\0\u0264\0\u02a8\0\314\0\u0e58\0\u1e04\0\u1e48\0\u0ee0\0\u0f68"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u0550\0\u1f58\0\u0594\0\u0594\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u0594\0\u2178"+
    "\0\u21bc\0\u0594\0\u2200\0\u2244\0\u2288\0\u22cc\0\u0594\0\u2310"+
    "\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u0594\0\u24ec"+
    "\0\u2530\0\u2574\0\u0594\0\u0594\0\u25b8\0\u25fc\0\u0594\0\u2640"+
    "\0\u0594\0\u2684\0\u0594\0\u26c8\0\u0594\0\u0594\0\u270c\0\u2750"+
    "\0\u0594\0\u2794\0\u27d8\0\u281c\0\u0594\0\u2860\0\u28a4\0\u0594"+
    "\0\u28e8\0\314\0\u292c\0\u0594\0\u0594\0\u2970\0\u29b4\0\u0594"+
    "\0\u0594\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u0594\0\u0594\0\u0594\0\u2bd4\0\u2c18\0\u2c5c\0\u0594\0\u0594"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u0594\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058"+
    "\0\u0594\0\u309c\0\u0594\0\u30e0\0\u3124\0\u0594\0\u0594\0\u3168"+
    "\0\u0594\0\u31ac\0\u31f0\0\u0594\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u0594\0\u3454\0\u0594\0\u3498"+
    "\0\u0594\0\u0594\0\u34dc\0\u0594\0\u3520\0\u3564\0\u35a8\0\u0594"+
    "\0\u0594\0\u0594\0\u0594\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u0594\0\u0594\0\u3740\0\u0594\0\u3784\0\u37c8\0\u380c\0\u0594"+
    "\0\u0594\0\u0594\0\u0594\0\u3850\0\u0594\0\u3894\0\u38d8\0\u0594"+
    "\0\u391c\0\u0594\0\u0594\0\u3960\0\u39a4\0\u39e8\0\u0594\0\u3a2c"+
    "\0\u0594\0\u3a70\0\u0594\0\u0594\0\u0594\0\u0594";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\3\25\1\26\1\27\1\30\1\6"+
    "\1\31\3\32\1\33\1\32\1\34\1\12\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\32\1\45"+
    "\2\32\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\2\32\1\4\1\0\6\66\1\67\75\66\2\70"+
    "\1\71\3\70\1\72\75\70\105\0\2\5\1\0\1\5"+
    "\104\0\1\6\2\0\3\6\3\0\2\6\1\0\1\73"+
    "\1\6\4\0\1\6\1\0\1\73\2\6\6\0\1\6"+
    "\34\0\1\73\4\0\2\74\1\75\3\74\1\76\33\74"+
    "\1\77\41\74\2\100\1\101\101\100\5\0\1\11\2\0"+
    "\3\11\3\0\2\11\1\0\1\102\1\11\4\0\1\11"+
    "\1\0\1\102\2\11\6\0\1\11\34\0\1\102\11\0"+
    "\1\12\2\0\3\12\3\0\2\12\1\0\1\103\1\12"+
    "\4\0\1\12\1\0\1\103\2\12\6\0\1\12\34\0"+
    "\1\103\11\0\1\13\2\0\3\13\3\0\2\13\1\0"+
    "\1\104\1\13\4\0\1\13\1\0\1\104\2\13\6\0"+
    "\1\13\34\0\1\104\4\0\2\105\1\0\1\105\1\0"+
    "\6\105\1\0\26\105\1\106\41\105\5\0\1\12\2\0"+
    "\3\12\3\0\2\12\1\0\1\103\1\12\4\0\1\107"+
    "\1\0\1\103\2\12\6\0\1\12\34\0\1\103\11\0"+
    "\1\20\2\0\3\20\3\0\2\20\1\0\1\110\1\20"+
    "\4\0\1\20\1\0\1\110\2\20\6\0\1\20\34\0"+
    "\1\110\11\0\1\20\2\0\3\20\3\0\2\20\1\0"+
    "\1\110\1\20\1\24\3\25\1\20\1\0\1\110\1\111"+
    "\1\20\6\0\1\20\34\0\1\110\4\0\5\112\1\113"+
    "\2\112\3\113\3\112\2\113\1\112\1\114\1\113\4\112"+
    "\1\113\1\112\1\114\2\113\6\112\1\113\33\112\1\115"+
    "\1\114\4\112\23\0\4\25\6\0\1\116\2\0\1\117"+
    "\3\0\1\120\1\0\1\116\14\0\1\121\7\0\1\117"+
    "\33\0\4\25\15\0\1\120\37\0\5\122\1\31\2\122"+
    "\3\31\3\122\2\31\1\122\1\123\1\31\4\122\1\31"+
    "\1\122\1\123\2\31\6\122\1\31\34\122\1\123\4\122"+
    "\5\124\1\6\2\124\3\6\3\124\2\6\1\124\1\73"+
    "\1\6\4\124\1\6\1\124\1\73\1\125\1\6\6\124"+
    "\1\6\34\124\1\73\4\124\5\0\1\31\2\0\3\31"+
    "\3\0\2\31\1\0\1\123\1\31\4\0\1\31\1\0"+
    "\1\123\2\31\6\0\1\31\34\0\1\123\27\0\4\32"+
    "\5\0\5\32\3\0\1\126\30\32\3\0\2\32\10\0"+
    "\1\127\14\0\4\32\5\0\5\32\3\0\1\126\30\32"+
    "\3\0\2\32\25\0\4\130\5\0\5\130\3\0\31\130"+
    "\3\0\2\130\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\3\32\1\131\11\32\1\132\3\32\1\133\6\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\10\32"+
    "\1\134\2\32\1\135\4\32\1\136\7\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\1\137\15\32"+
    "\1\140\11\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\4\32\1\141\3\32\1\142\5\32\1\143"+
    "\11\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\13\32\1\144\1\32\1\145\10\32\1\146\1\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\10\32\1\147\5\32\1\150\1\32\1\151\2\32\1\152"+
    "\4\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\5\32\1\153\6\32\1\154\1\155\3\32\1\156"+
    "\1\157\5\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\4\32\1\160\23\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\1\161\3\32\1\162"+
    "\3\32\1\163\5\32\1\164\11\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\10\32\1\165\5\32"+
    "\1\166\11\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\1\32\1\167\3\32\1\170\12\32\1\171"+
    "\2\32\1\172\4\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\20\32\1\173\1\32\1\174\5\32"+
    "\3\0\2\32\10\0\1\127\14\0\4\32\5\0\5\32"+
    "\3\0\1\126\1\175\3\32\1\176\23\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\7\32\1\177"+
    "\12\32\1\200\5\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\4\32\1\201\13\32\1\202\2\32"+
    "\1\203\3\32\1\204\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\21\32\1\205\6\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\1\206\27\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\7\32\1\207\20\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\16\32\1\210\11\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\10\32\1\211"+
    "\17\32\3\0\2\32\24\0\1\212\66\0\1\213\2\0"+
    "\3\213\3\0\2\213\1\0\1\65\1\213\4\0\1\213"+
    "\1\0\1\65\1\214\1\213\6\0\1\213\34\0\1\65"+
    "\11\0\1\6\2\0\3\6\3\0\2\6\1\0\1\73"+
    "\1\6\4\0\1\6\1\0\1\73\1\125\1\6\6\0"+
    "\1\6\34\0\1\73\4\0\2\74\1\75\3\74\1\215"+
    "\33\74\1\77\41\74\6\0\1\216\75\0\2\74\3\0"+
    "\73\74\1\0\2\74\2\0\4\217\2\0\1\100\70\0"+
    "\3\217\6\0\1\11\2\0\3\11\3\0\2\11\1\0"+
    "\1\102\1\11\4\0\1\11\1\0\1\102\1\220\1\11"+
    "\6\0\1\11\34\0\1\102\11\0\1\12\2\0\3\12"+
    "\3\0\2\12\1\0\1\103\1\12\4\0\1\12\1\0"+
    "\1\103\1\221\1\12\6\0\1\12\34\0\1\103\11\0"+
    "\1\13\2\0\3\13\3\0\2\13\1\0\1\104\1\13"+
    "\4\0\1\13\1\0\1\104\1\222\1\13\6\0\1\13"+
    "\34\0\1\104\17\0\1\223\76\0\1\105\4\0\1\224"+
    "\7\0\4\225\13\0\1\105\2\0\3\105\1\0\2\105"+
    "\5\0\1\105\1\0\1\105\2\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\1\226\15\0\1\227\2\0\3\227"+
    "\3\0\2\227\1\0\2\227\4\0\1\227\1\0\3\227"+
    "\6\0\1\227\34\0\1\227\11\0\1\20\2\0\3\20"+
    "\3\0\2\20\1\0\1\110\1\20\4\0\1\20\1\0"+
    "\1\110\1\111\1\20\6\0\1\20\34\0\1\110\11\0"+
    "\1\113\2\0\3\113\3\0\2\113\1\0\1\114\1\113"+
    "\4\0\1\113\1\0\1\114\2\113\6\0\1\113\34\0"+
    "\1\114\11\0\1\113\2\0\3\113\3\0\2\113\1\0"+
    "\1\114\1\113\4\0\1\113\1\0\1\114\1\230\1\113"+
    "\6\0\1\113\34\0\1\114\27\0\2\231\102\0\4\232"+
    "\5\0\2\232\7\0\6\232\54\0\4\25\100\0\3\233"+
    "\63\0\1\31\2\0\3\31\3\0\2\31\1\0\1\123"+
    "\1\31\4\0\1\31\1\0\1\123\1\234\1\31\6\0"+
    "\1\31\34\0\1\123\27\0\4\32\5\0\5\32\4\0"+
    "\30\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\3\32\1\235\24\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\3\32\1\236\24\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\14\32"+
    "\1\237\13\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\15\32\1\240\12\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\16\32\1\241\11\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\4\32\1\242\23\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\21\32\1\243\6\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\15\32\1\244"+
    "\12\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\5\32\1\245\22\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\21\32\1\246\2\32\1\247"+
    "\3\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\10\32\1\250\10\32\1\251\6\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\3\32\1\252"+
    "\17\32\1\253\4\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\2\32\1\254\14\32\1\255\10\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\15\32\1\256\12\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\20\32\1\257\7\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\16\32\1\260"+
    "\11\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\15\32\1\261\12\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\17\32\1\262\10\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\2\32"+
    "\1\263\17\32\1\264\5\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\15\32\1\265\12\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\4\32"+
    "\1\266\23\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\22\32\1\267\5\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\2\32\1\270\25\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\22\32\1\271\5\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\26\32\1\272\1\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\3\32\1\273"+
    "\24\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\13\32\1\274\14\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\22\32\1\275\5\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\11\32"+
    "\1\276\16\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\22\32\1\277\5\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\16\32\1\300\11\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\20\32\1\301\7\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\10\32\1\302\17\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\5\32\1\303"+
    "\14\32\1\304\5\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\13\32\1\305\4\32\1\306\7\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\1\307\27\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\14\32\1\310\13\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\27\32\1\311\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\17\32"+
    "\1\312\10\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\17\32\1\313\10\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\10\32\1\314\17\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\20\32\1\315\7\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\4\32\1\316\3\32\1\317\17\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\20\32\1\320\7\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\4\32\1\321\23\32\3\0\2\32"+
    "\2\0\22\322\1\0\61\322\5\0\1\213\2\0\3\213"+
    "\3\0\2\213\1\0\1\65\1\213\4\0\1\213\1\0"+
    "\1\65\2\213\6\0\1\213\34\0\1\65\17\0\1\223"+
    "\7\0\4\225\100\0\4\323\5\0\2\323\7\0\6\323"+
    "\54\0\2\231\17\0\1\116\62\0\4\232\5\0\2\232"+
    "\6\0\1\117\6\232\54\0\3\233\16\0\1\121\62\0"+
    "\4\32\5\0\5\32\3\0\1\126\20\32\1\324\7\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\3\32\1\325\24\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\2\32\1\326\25\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\1\327\27\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\4\32\1\330\15\32\1\331\5\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\2\32\1\332\16\32"+
    "\1\333\1\334\1\32\1\335\3\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\4\32\1\336\23\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\2\32\1\337\17\32\1\340\5\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\5\32\1\341\22\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\4\32\1\342\23\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\14\32\1\343\13\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\4\32\1\344"+
    "\23\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\16\32\1\345\11\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\1\346\27\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\14\32\1\347"+
    "\13\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\2\32\1\350\25\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\16\32\1\351\11\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\13\32"+
    "\1\352\14\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\4\32\1\353\23\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\16\32\1\354\11\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\20\32\1\355\7\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\20\32\1\356\7\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\7\32\1\357"+
    "\20\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\10\32\1\360\17\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\10\32\1\361\17\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\4\32"+
    "\1\362\23\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\2\32\1\363\25\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\21\32\1\364\6\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\23\32\1\365\4\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\22\32\1\366\5\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\17\32\1\367"+
    "\10\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\13\32\1\370\14\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\4\32\1\371\23\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\15\32"+
    "\1\372\12\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\15\32\1\373\12\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\13\32\1\374\14\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\13\32\1\375\14\32\3\0\2\32\25\0\4\105\5\0"+
    "\2\105\7\0\6\105\54\0\4\32\5\0\5\32\3\0"+
    "\1\126\12\32\1\376\15\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\12\32\1\377\15\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\4\32"+
    "\1\u0100\23\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\22\32\1\u0101\5\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\10\32\1\u0102\17\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\4\32\1\u0103\23\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\20\32\1\u0104\7\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\1\u0105\27\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\10\32\1\u0106\17\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\17\32\1\u0107\10\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\20\32\1\u0108"+
    "\7\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\13\32\1\u0109\14\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\20\32\1\u010a\7\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\23\32"+
    "\1\u010b\4\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\20\32\1\u010c\7\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\22\32\1\u010d\5\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\1\u010e\27\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\16\32\1\u010f\11\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\16\32\1\u0110\11\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\15\32\1\u0111\12\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\15\32\1\u0112\12\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\2\32\1\u0113"+
    "\25\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\4\32\1\u0114\23\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\20\32\1\u0115\7\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\10\32"+
    "\1\u0116\17\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\13\32\1\u0117\14\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\4\32\1\u0118\23\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\6\32\1\u0119\21\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\4\32\1\u011a\23\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\3\32\1\u011b"+
    "\24\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\17\32\1\u011c\10\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\15\32\1\u011d\12\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\20\32"+
    "\1\u011e\7\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\20\32\1\u011f\7\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\15\32\1\u0120\12\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\22\32\1\u0121\5\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\22\32\1\u0122\5\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\13\32\1\u0123"+
    "\14\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\22\32\1\u0124\5\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\3\32\1\u0125\24\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\5\32"+
    "\1\u0126\22\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\22\32\1\u0127\5\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\3\32\1\u0128\24\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\22\32\1\u0129\5\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\15\32\1\u012a\12\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\2\32\1\u012b"+
    "\25\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\1\u012c\27\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\22\32\1\u012d\5\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\23\32\1\u012e"+
    "\4\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\22\32\1\u012f\5\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\3\32\1\u0130\24\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\2\32"+
    "\1\u0131\25\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\27\32\1\u0132\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\4\32\1\u0133\23\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\1\u0134"+
    "\27\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\16\32\1\u0135\11\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\22\32\1\u0136\5\32\3\0"+
    "\2\32\25\0\4\32\5\0\5\32\3\0\1\126\4\32"+
    "\1\u0137\23\32\3\0\2\32\25\0\4\32\5\0\5\32"+
    "\3\0\1\126\4\32\1\u0138\23\32\3\0\2\32\25\0"+
    "\4\32\5\0\5\32\3\0\1\126\22\32\1\u0139\5\32"+
    "\3\0\2\32\25\0\4\32\5\0\5\32\3\0\1\126"+
    "\2\32\1\u013a\25\32\3\0\2\32\25\0\4\32\5\0"+
    "\5\32\3\0\1\126\20\32\1\u013b\7\32\3\0\2\32"+
    "\25\0\4\32\5\0\5\32\3\0\1\126\4\32\1\u013c"+
    "\23\32\3\0\2\32\25\0\4\32\5\0\5\32\3\0"+
    "\1\126\20\32\1\u013d\7\32\3\0\2\32\25\0\4\32"+
    "\5\0\5\32\3\0\1\126\4\32\1\u013e\23\32\3\0"+
    "\2\32\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15028];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\2\11\2\1\1\11\5\1\1\11"+
    "\4\1\2\11\26\1\1\11\1\1\5\11\1\1\1\0"+
    "\1\11\1\1\2\0\4\1\2\0\3\1\1\11\2\1"+
    "\1\11\4\0\1\11\1\1\1\11\1\1\1\0\1\11"+
    "\62\1\1\0\2\1\2\11\1\0\3\1\1\11\1\1"+
    "\2\0\73\1\1\11\1\0\153\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
private int tripleQuoteCount = 0;
private int rawQuoteCount = 0;

private final Set<Character> UNARY_MINUS_PRED =
    new HashSet<Character>(Arrays.asList(' ', '\t', '\n', '\r', ',', ';', '(', '[', '{'));

Set<Character> OpChars = new HashSet<>(Arrays.asList(
        '+', '-', '*', '/', '\\', '<', '>', '!', '?', '^',
        '.', '|', '=', '%', '&', '$', '@', '~', ':'));

private IElementType handleUnaryMinus(IElementType type) {
    if (yycharat(0) != '-') {
        return type;
    }
    if (yychar > 0 && UNARY_MINUS_PRED.contains(yycharat(-1))) {
        return type;
    }
    yypushback(yylength() - 1);
    yybegin(YYINITIAL);
    return NimTypes.OP8;
}

private IElementType considerAssign(IElementType type) {
    return yycharat(yylength() - 1) == '=' ? NimTypes.OP1 : type;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case TRIPLEQUOTE: {
              yybegin(YYINITIAL);
                           return NimTypes.TRIPLESTR_ERROR;
            }  // fall though
            case 319: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 110: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 3:
            { return NimTypes.OP5;
            }
          // fall through
          case 112: break;
          case 4:
            { return considerAssign(NimTypes.OP10);
            }
          // fall through
          case 113: break;
          case 5:
            { return considerAssign(NimTypes.OP9);
            }
          // fall through
          case 114: break;
          case 6:
            { return considerAssign(NimTypes.OP7);
            }
          // fall through
          case 115: break;
          case 7:
            { return NimTypes.LPAREN;
            }
          // fall through
          case 116: break;
          case 8:
            { return NimTypes.RPAREN;
            }
          // fall through
          case 117: break;
          case 9:
            { return considerAssign(NimTypes.OP8);
            }
          // fall through
          case 118: break;
          case 10:
            { return NimTypes.COMMA;
            }
          // fall through
          case 119: break;
          case 11:
            { return considerAssign(NimTypes.OP6);
            }
          // fall through
          case 120: break;
          case 12:
            { return handleUnaryMinus(NimTypes.DEC_LIT);
            }
          // fall through
          case 121: break;
          case 13:
            { return NimTypes.OP2;
            }
          // fall through
          case 122: break;
          case 14:
            { return NimTypes.SEMICOLON;
            }
          // fall through
          case 123: break;
          case 15:
            { return NimTypes.IDENT;
            }
          // fall through
          case 124: break;
          case 16:
            { return NimTypes.LBRACKET;
            }
          // fall through
          case 125: break;
          case 17:
            { return NimTypes.RBRACKET;
            }
          // fall through
          case 126: break;
          case 18:
            { return NimTypes.LBRACE;
            }
          // fall through
          case 127: break;
          case 19:
            { return NimTypes.RBRACE;
            }
          // fall through
          case 128: break;
          case 20:
            { return NimTypes.OP8;
            }
          // fall through
          case 129: break;
          case 21:
            { tripleQuoteCount = 0;
            }
          // fall through
          case 130: break;
          case 22:
            { tripleQuoteCount++;
                           if (tripleQuoteCount >= 3) {
                             if (yycharat(yylength()) != '\"') {
                               yybegin(YYINITIAL);
                               return NimTypes.TRIPLESTR_LIT;
                             }
                           }
            }
          // fall through
          case 131: break;
          case 23:
            { rawQuoteCount = 0;
            }
          // fall through
          case 132: break;
          case 24:
            { yypushback(1);
                           yybegin(YYINITIAL);
                           return NimTypes.STR_ERROR;
            }
          // fall through
          case 133: break;
          case 25:
            { rawQuoteCount++;
                           if (rawQuoteCount == 1 && yycharat(yylength()) != '\"') {
                             yybegin(YYINITIAL);
                             return NimTypes.RSTR_LIT;
                           } else if (rawQuoteCount == 2) {
                              rawQuoteCount = 0;
                           }
            }
          // fall through
          case 134: break;
          case 26:
            { return NimTypes.STR_ERROR;
            }
          // fall through
          case 135: break;
          case 27:
            { return NimTypes.STR_LIT;
            }
          // fall through
          case 136: break;
          case 28:
            { return NimTypes.COMMENT;
            }
          // fall through
          case 137: break;
          case 29:
            { yypushback(1); return NimTypes.OP9;
            }
          // fall through
          case 138: break;
          case 30:
            { return NimTypes.OP0;
            }
          // fall through
          case 139: break;
          case 31:
            { yypushback(1); return NimTypes.DOT;
            }
          // fall through
          case 140: break;
          case 32:
            { return NimTypes.DOT_RBRACE;
            }
          // fall through
          case 141: break;
          case 33:
            { yypushback(1); return NimTypes.COLON;
            }
          // fall through
          case 142: break;
          case 34:
            { yypushback(1); return NimTypes.EQUALS;
            }
          // fall through
          case 143: break;
          case 35:
            { yybegin(RAWSTRING); rawQuoteCount = 0;
            }
          // fall through
          case 144: break;
          case 36:
            { return NimTypes.INVALID_IDENT;
            }
          // fall through
          case 145: break;
          case 37:
            { return NimTypes.AS;
            }
          // fall through
          case 146: break;
          case 38:
            { return NimTypes.DO;
            }
          // fall through
          case 147: break;
          case 39:
            { return NimTypes.IF;
            }
          // fall through
          case 148: break;
          case 40:
            { return NimTypes.IN;
            }
          // fall through
          case 149: break;
          case 41:
            { return NimTypes.IS;
            }
          // fall through
          case 150: break;
          case 42:
            { return NimTypes.OF;
            }
          // fall through
          case 151: break;
          case 43:
            { return NimTypes.OR;
            }
          // fall through
          case 152: break;
          case 44:
            { yybegin(TRIPLEQUOTE); tripleQuoteCount = 0;
            }
          // fall through
          case 153: break;
          case 45:
            { return NimTypes.CHAR_LIT;
            }
          // fall through
          case 154: break;
          case 46:
            { return NimTypes.OP9;
            }
          // fall through
          case 155: break;
          case 47:
            { return handleUnaryMinus(NimTypes.BIN_LIT);
            }
          // fall through
          case 156: break;
          case 48:
            { return handleUnaryMinus(NimTypes.HEX_LIT);
            }
          // fall through
          case 157: break;
          case 49:
            { return handleUnaryMinus(NimTypes.OCT_LIT);
            }
          // fall through
          case 158: break;
          case 50:
            { return NimTypes.AND;
            }
          // fall through
          case 159: break;
          case 51:
            { return NimTypes.ASM;
            }
          // fall through
          case 160: break;
          case 52:
            { return NimTypes.DIV;
            }
          // fall through
          case 161: break;
          case 53:
            { return NimTypes.END;
            }
          // fall through
          case 162: break;
          case 54:
            { return NimTypes.FOR;
            }
          // fall through
          case 163: break;
          case 55:
            { return NimTypes.LET;
            }
          // fall through
          case 164: break;
          case 56:
            { return NimTypes.MOD;
            }
          // fall through
          case 165: break;
          case 57:
            { return NimTypes.NIL;
            }
          // fall through
          case 166: break;
          case 58:
            { return NimTypes.NOT;
            }
          // fall through
          case 167: break;
          case 59:
            { return NimTypes.OUT;
            }
          // fall through
          case 168: break;
          case 60:
            { return NimTypes.PTR;
            }
          // fall through
          case 169: break;
          case 61:
            { return NimTypes.REF;
            }
          // fall through
          case 170: break;
          case 62:
            { return NimTypes.SHL;
            }
          // fall through
          case 171: break;
          case 63:
            { return NimTypes.SHR;
            }
          // fall through
          case 172: break;
          case 64:
            { return NimTypes.TRY;
            }
          // fall through
          case 173: break;
          case 65:
            { return NimTypes.VAR;
            }
          // fall through
          case 174: break;
          case 66:
            { return NimTypes.XOR;
            }
          // fall through
          case 175: break;
          case 67:
            { yypushback(1); return NimTypes.LBRACE_DOT;
            }
          // fall through
          case 176: break;
          case 68:
            { return NimTypes.ADDR;
            }
          // fall through
          case 177: break;
          case 69:
            { return NimTypes.BIND;
            }
          // fall through
          case 178: break;
          case 70:
            { return NimTypes.CASE;
            }
          // fall through
          case 179: break;
          case 71:
            { return NimTypes.CAST;
            }
          // fall through
          case 180: break;
          case 72:
            { return NimTypes.ELIF;
            }
          // fall through
          case 181: break;
          case 73:
            { return NimTypes.ELSE;
            }
          // fall through
          case 182: break;
          case 74:
            { return NimTypes.ENUM;
            }
          // fall through
          case 183: break;
          case 75:
            { return NimTypes.FROM;
            }
          // fall through
          case 184: break;
          case 76:
            { return NimTypes.FUNC;
            }
          // fall through
          case 185: break;
          case 77:
            { return NimTypes.PROC;
            }
          // fall through
          case 186: break;
          case 78:
            { return NimTypes.TYPE;
            }
          // fall through
          case 187: break;
          case 79:
            { return NimTypes.WHEN;
            }
          // fall through
          case 188: break;
          case 80:
            { return NimTypes.BLOCK;
            }
          // fall through
          case 189: break;
          case 81:
            { return NimTypes.BREAK;
            }
          // fall through
          case 190: break;
          case 82:
            { return NimTypes.CONST;
            }
          // fall through
          case 191: break;
          case 83:
            { return NimTypes.DEFER;
            }
          // fall through
          case 192: break;
          case 84:
            { return NimTypes.ISNOT;
            }
          // fall through
          case 193: break;
          case 85:
            { return NimTypes.MACRO;
            }
          // fall through
          case 194: break;
          case 86:
            { return NimTypes.MIXIN;
            }
          // fall through
          case 195: break;
          case 87:
            { return NimTypes.NOTIN;
            }
          // fall through
          case 196: break;
          case 88:
            { return NimTypes.RAISE;
            }
          // fall through
          case 197: break;
          case 89:
            { return NimTypes.TUPLE;
            }
          // fall through
          case 198: break;
          case 90:
            { return NimTypes.USING;
            }
          // fall through
          case 199: break;
          case 91:
            { return NimTypes.WHILE;
            }
          // fall through
          case 200: break;
          case 92:
            { return NimTypes.YIELD;
            }
          // fall through
          case 201: break;
          case 93:
            { return NimTypes.EXCEPT;
            }
          // fall through
          case 202: break;
          case 94:
            { return NimTypes.EXPORT;
            }
          // fall through
          case 203: break;
          case 95:
            { return NimTypes.IMPORT;
            }
          // fall through
          case 204: break;
          case 96:
            { return NimTypes.METHOD;
            }
          // fall through
          case 205: break;
          case 97:
            { return NimTypes.OBJECT;
            }
          // fall through
          case 206: break;
          case 98:
            { return NimTypes.RETURN;
            }
          // fall through
          case 207: break;
          case 99:
            { return NimTypes.STATIC;
            }
          // fall through
          case 208: break;
          case 100:
            { return NimTypes.CONCEPT;
            }
          // fall through
          case 209: break;
          case 101:
            { return NimTypes.DISCARD;
            }
          // fall through
          case 210: break;
          case 102:
            { return NimTypes.FINALLY;
            }
          // fall through
          case 211: break;
          case 103:
            { return NimTypes.INCLUDE;
            }
          // fall through
          case 212: break;
          case 104:
            { return NimTypes.CONTINUE;
            }
          // fall through
          case 213: break;
          case 105:
            { return NimTypes.DISTINCT;
            }
          // fall through
          case 214: break;
          case 106:
            { return NimTypes.ITERATOR;
            }
          // fall through
          case 215: break;
          case 107:
            { return NimTypes.TEMPLATE;
            }
          // fall through
          case 216: break;
          case 108:
            { return NimTypes.CONVERTER;
            }
          // fall through
          case 217: break;
          case 109:
            { return NimTypes.INTERFACE;
            }
          // fall through
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
